{% extends "templates/slice/slice.jinja2" %}

{## Header ##}

{% set poster_title = "Improving Verification Infrastructure for Chisel RTL" %}
{# ‘poster_subtitle’ is optional; use "" to hide it #}
{% set poster_subtitle = "" %}
{# Change ‘venue’ to a conference or workshop name if any #}
{% set venue = "SLICE Winter 2023 Retreat" %}
{# ‘webpage_title’ is displayed in the browser’s top bar #}
{% set webpage_title = poster_title %}
{# ‘project_url’ is used in the footer and for the logo #}
{% set project_url = "https://github.com/vighneshiyer/simcommand" %}

{# Publication info is hidden by default (.publication-info in CSS) #}
{% set pub_datetime_iso = "2020-09-08" %}
{% set pub_date = "September 8, 2020" %}

{# Custom styles and JS for a particular poster #}
{% block custom_head %}
{% endblock %}

{% block fonts %}
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500;700&family=Fira+Sans+Condensed:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&display=swap" rel="stylesheet">
{% endblock %}

{% block authors %}
  {# Put authors here, with one link per author. #}
  <a property="author">Vighnesh Iyer</a>,
  <a property="author">Kevin Laeufer</a>,
  <a property="author">Rohit Agarwal</a>,
  <a property="author">Young-Jin Park</a>,
  <a property="author">Andy Yin</a>,
  <a property="author">Oliver Yu</a>,
  <a property="author">Bryan Ngo</a>,
  <a property="author">Shawn Kong</a>,
  <a property="author">Grace Chen</a>,
  <a property="author">Yi Mu</a>,
  <a property="author">Sungwoong Ha</a>,
  <a property="author">Bora Nikolic</a>
{% endblock %}

{% block affiliations %}
  <a property="sourceOrganization">UC Berkeley</a>
{% endblock %}

{### Footer ##}

{% block footer_left %}
  <a href="{{ project_url }}">{{ project_url }}</a>
{% endblock %}

{% block footer_center %}
    vighnesh.iyer@berkeley.edu
{% endblock %}

{% block footer_right %}
  <span class="credits">
    SLICE Retreat, Winter 2023
  </span>
{% endblock %}

{### Contents ###}

{# Contents are individual boxes (typically ‘article’s or ‘figure’s).  Each
   ‘article’ contains a header and some contents. #}
{% block contents %}
<article>
  <header><h3>Motivation</h3></header>
  <ul>
    <li>Move beyond SystemVerilog + UVM without compromising features or performance</li>
    <li>Design new tools that leverage open source hardware generator ecosystems</li>
  </ul>
</article>

<!--
<article>
<header><h3>Simulator Independent Coverage</h3></header>
</article>
-->

<article>
  <header><h3>SimCommand Overview</h3></header>
  <p><strong>Goal:</strong> A Scala-embedded testbench API with fork/join support and performance parity with SystemVerilog testbenches</p>
  <!--<p><strong>Implementation:</strong> fork/join with cooperatively yielding 'threads', leverage chiseltest as simulator API</p>-->
  <ul>
    <li>Separation of description and interpretation of testbench actions</li>
    <li>Threads are just pointers to continuations → fast thread pause/resume</li>
    <li>A <code>Command[R]</code> is a <em>description</em> of testbench actions which terminates with a value of type <code>R</code></li>
  </ul>

  <pre class="fragment"><code class="language-scala medium">val program: Command[Boolean] = for {
    _ <- poke(dut.enq.valid, 1.B)
    _ <- step(1)
    p <- peek(dut.deq.valid)
} yield p.litValue == 1</pre></code>

  <img class="fragment" src="./figs/simcommand/command_sequencing.svg"/>

  <p class="center">SimCommand is <strong>already 5-8x faster</strong> than chiseltest's built-in fork/join threading</p>
</article>

<article>
  <header><h3>SimCommand Channels</h3></header>
  <p class="center">Channels enable deterministic thread-to-thread communication, similar to SystemVerilog mailboxes or golang channels.</p>

  <pre class="fragment"><code class="language-scala small">ch <- makeChannel[Integer](size=10)
_ <- put(ch, 1)
t <- fork(for { v <- getBlocking(ch) } yield v)
v <- join(t)</pre></code>
</article>

<article>
  <header><h3>SimCommand Imperative Interpreter</h3></header>
  <ul>
    <li>Older purely recursive interpreter used no mutable data structures and required unnecessary allocations.</li>
    <li>New imperative interpreter maintains an explicit stack per thread and <strong>improves performance by 30%</strong>.</li>
  </ul>
</article>

<article>
  <header><h3>SimCommand Tail Recursion Primitive</h3></header>
  <ul>
    <li>Naive monadic recursion can blow up the stack</li>
    <li>One solution is <em>trampolining</em> where the stack is dumped to the heap on every recursive call.</li>
  </ul>

  <pre class="fragment"><code class="language-scala small">def tailRecM[S, R](s: S)
  (f: S => Command[Either[S, R]]): Command[R] = {
  f(s).flatMap {
    case Left(value) => tailRecM(value)(f)
    case Right(value) => lift(value)
  }
}</pre></code>

  <p class="center">However, trampolining is slow. A recursion <em>primitive</em> that elides trampolining demonstrates <strong>400% performance improvement</strong>.</p>
</article>

<article>
  <header><h3>Chiseltest ⬌ RTL Simulator FFI</h3></header>
  <img width="80%" src="./figs/simcommand/command_interpretation.svg"/>

  <ul>
    <li>The foreign function interface (FFI) linking chiseltest on the JVM and the RTL simulation (Verilator) in C++ is a bottleneck</li>
    <li>Using JNI vs JNA as the FFI API <strong>improves performance by up to 10x</strong> - WIP: integration into chiseltest</li>
  </ul>
</article>

<article>
  <header><h3>Lightweight "HLS" Recipes for Chisel</h3></header>
  <ul>
    <li>Writing FSMs manually in RTL is error prone and obscures control flow intent</li>
    <li>WIP: a mini-DSL to describe imperative control flow that compiles to Chisel, inspired by Recipes in Blarney HDL</li>
  </ul>
  <pre class="fragment"><code class="language-scala small">axi.ar_ready := 1.B
axi.r_valid := 0.B
val readOnce = Sequential {
  WaitUntil(axi.ar_valid === 1.B)
  Action {
    axi.r_data := mem.read(axi.ar_addr)
    axi.r_valid := 1.B
  }
  WaitUntil(axi.r_ready === 1.B)
  Tick()
}
Forever(readOnce).compile()</pre></code>
</article>

<article>
  <header><h3>"SVA" for Chisel</h3></header>
  <ul>
    <li>Sequence library to describe temporal properties in Chisel</li>
    <li>Supports a subset of linear PSL (sequence combinators + bounded delays + LTL operators)</li>
    <li>2 backends: naive monitor automata synthesis, SPOT-driven optimized automata synthesis</li>
  </ul>
  <!--<div class="container">
  <div class="col">-->
  <pre class="fragment"><code class="language-scala small">class Example extends Module {
  val a, b = Reg(Bool())
  val c = Reg(UInt(8.W))
  assert(a |=> b)
  assert(a ###1 b |=> (c > 15.U))
}</pre></code>
  <img src="./figs/sequences/psl_spot.svg" />
  <p class="small center"><a href="https://github.com/ekiwi/chisel-sequences">github.com/ekiwi/chisel-sequences</a></p>
</article>

<!--
<article>
  <header><h3>FIRRTL → Graph for Netlist Embedding</h3></header>
</article>
-->

<article>
  <header><h3>Generative Parametric Random Stimulus API</h3></header>
  <ul>
    <li>Existing declarative constrained random APIs do not permit <em>controllable</em> randomness; only a single seed can be set</li>
    <li>We propose a functional API for random stimulus generation that is backed by a source of randomness or a controllable bytestream</li>
  </ul>

  <!--<pre><code class="language-scala small">val tupGen: Gen[Int, Int, String] = for {
  lit1 <- Gen.range(0, 10)
  lit2 <- Gen.range(11, 20)
  op <- Gen.oneOf(Seq("add", "sub"),
                  Seq(0.1, 0.9))
} yield (lit1, lit2, op)
tupGen.generate(ScalaRandom(seed=10))
tupGen.generate(Parametric(Seq[Byte]))</code></pre>-->

  <pre><code class="language-scala small">val seqGen: Gen[Seq[Int]] = for {
  lit <- Gen.range(0, 10)
  tailGen <- Gen.oneOf(Gen(Seq()) -> 0.1,
    seqGen -> 0.9),
  seqn <- tailGen.map(t => lit +: t)
} yield seqn
seqGen.generate(ParametricRandom(Seq[Byte]))
// Seq(6, 7, 0, 9, 0, 7)
seqGen.generate(ScalaRandom(seed=10))
// Seq(9, 8, 3)</code></pre>

  <p class="center small"><a href="https://github.com/girantinas/randomapi">github.com/girantinas/randomapi</a></p>
</article>

<article>
  <header><h3>RV32I StimGen + Parametric Fuzzing</h3></header>
  <ul>
    <li>A rv32ui stimulus generator with basic sequences (Inst, RAW, Loop, Branch) was created using this API</li>
    <li>The generator is put in a parametric fuzzing loop with spike's memory model</li>
  </ul>
  <img src="./figs/fuzzing/parametric_fuzzing.svg" />
  <ul>
    <li>WIP: Chisel CRV integration, parametric fuzzing results</li>
  </ul>
</article>

<article>
  <header><h3>Other Ongoing Projects</h3></header>
  <ul>
    <li><strong>Hardware coverage visualization webapp</strong>: a new take on a coverage frontend that can natively parse UCIS and Verilator databases, compute custom coverage scores, and display coverage heatmaps</li>
    <li><strong>rtl2graph</strong>: a FIRRTL → graph compiler to support circuit embeddings</li>
    <li><strong>SimCommand VIPs</strong>: VIPs written using SimCommand APIs for AXI4 and TileLink</li>
    <!-- Simulator independent coverage -->
  </ul>
</article>
{% endblock %}
