{% extends "templates/slice/slice.jinja2" %}

{## Header ##}

{% set poster_title = "Simulator Independent Coverage for RTL Hardware Languages" %}
{# ‘poster_subtitle’ is optional; use "" to hide it #}
{% set poster_subtitle = "" %}
{# Change ‘venue’ to a conference or workshop name if any #}
{% set venue = "ASPLOS 2023" %}
{# ‘webpage_title’ is displayed in the browser’s top bar #}
{% set webpage_title = poster_title + " — " + venue %}
{# ‘project_url’ is used in the footer and for the logo #}
{% set project_url = "https://github.com/ekiwi/simulator-independent-coverage/" %}

{# Publication info is hidden by default (.publication-info in CSS) #}
{% set pub_datetime_iso = "2023-03-25" %}
{% set pub_date = "March 25, 2023" %}

{# Custom styles and JS for a particular poster #}
{% block custom_head %}
<style type="text/css">
  html { font-size: 1.15rem }
</style>
{% endblock %}

{% block authors %}
  {# Put authors here, with one link per author. #}
  <a property="author">Kevin Laeufer<sup>a</sup></a>,
  <a property="author">Vighnesh Iyer<sup>a</sup></a>,
  <a property="author">David Biancolin<sup>b</sup></a>,
  <a property="author">Jonathan Bachrach<sup>c</sup></a>,
  <a property="author">Borivoje Nikolić<sup>a</sup></a>,
  <a property="author">Koushik Sen<sup>a</sup></a>
{% endblock %}

{% block affiliations %}
  <sup>a</sup><a property="sourceOrganization">University of California, Berkeley</a>,
  <sup>b</sup><a property="sourceOrganization">SiFive</a>,
  <sup>c</sup><a property="sourceOrganization">JITX</a>
{% endblock %}

{### Footer ##}

{% block footer_left %}
  <address class="monospace" style="font-weight:400;">
    <a href="{{ project_url }}">{{ project_url }}</a>
  </address>
{% endblock %}

{% block footer_center %}
  <address class="monospace" style="font-weight:400;">
    {laeufer, vighnesh.iyer, biancolin, bora, ksen}@eecs.berkeley.edu,
    jrb@pobox.com
  </address>
{% endblock %}

{% block footer_right %}
  <address>
    ASPLOS 2023
  </address>
{% endblock %}

{### Contents ###}

{# Contents are individual boxes (typically ‘article’s or ‘figure’s).  Each
   ‘article’ contains a header and some contents. #}
{% block contents %}
  <article>
    <header><h3>Introduction</h3></header>

    <ul>
      <li>Dynamic simulation is the workhorse of pre-silicon verification</li>
      <li>RTL-level coverage is used to approximate the thoroughness of verification</li>
      <li>Support for multiple automated coverage metrics is a critical feature for RTL simulators</li>
    </ul>
  </article>

  <article>
    <header><h3>RTL Coverage Instrumentation and Collection Today</h3></header>

    <p><strong>1.</strong> Open source and research simulators lack support for a wide range of automated coverage metrics</p>
    <ul>
      <li>Verilator only supports line/toggle coverage</li>
      <li>ESSENT and FireSim do not support coverage</li>
    </ul>

    <p><strong>2.</strong> Merging coverage across simulators (SW, FPGA, formal) requires uniform coverage instrumentation</p>

    <p><strong>3.</strong> New RTL hardware languages lack support for source-level coverage collection</p>

    <img src="./figs/sic-asplos23/losing_semantics.svg" />
  </article>

  <article>
    <header><h3>Our Proposal</h3></header>
    <p class="center">Implement coverage instrumentation with compiler passes on a hardware IR vs. baking coverage instrumentation into each simulator</p>

    <img src="./figs/sic-asplos23/coverage_figure_m_n.svg" width=80% />

  </article>

  <article>
    <header><h3>Benefits of Our Approach</h3></header>

    <ul>
      <li>Uniform coverage specification for all simulators<br />
          <span style="line-height:1.6;"><strong>→</strong> Trivial merging of coverage across simulators</span>
      </li>
      <li>Simulators only have to implement one coverage primitive<br />
          <span style="line-height:1.6;"><strong>→</strong> New simulators instantly get automated coverage</span>
      </li>
      <li>Source HDL mapping captured during coverage instrumentation for report annotation</li>
      <li>Unified report generator for different coverage metrics and simulators</li>
    </ul>
  </article>

  <article>
    <header><h3>The Cover Primitive</h3></header>
    <p class="center"><code>cover(clock, predicate, enable)</code></p>

    <ul>
      <li><code>cover</code> is injected by coverage instrumentation passes in the hardware IR (e.g. FIRRTL) compiler</li>
    </ul>

    <img src="./figs/sic-asplos23/cover.svg" />

    <ul>
      <li>All simulators implement <code>cover</code> as a counter which increments when the <code>predicate</code> is true on a <code>clock</code> edge</li>
    </ul>
  </article>

  <article>
    <header><h3>Implementing Line Coverage</h3></header>

    <img src="./figs/sic-asplos23/coverage_line_coverage.svg" width=100% />
  </article>

  <article>
    <header><h3>Implementing Toggle Coverage</h3></header>

    <img src="./figs/sic-asplos23/coverage_toggle_coverage.svg" width=80% />

    <ul>
      <li>Capture a net's value in the previous clock cycle with a register</li>
      <li>Cover the output of an XOR between the register output and the current net value</li>
      <li>Compiler pass performs alias analysis and can selectively instrument register, IOs, memories, and wires</li>
    </ul>
  </article>

  <!--
  <article>
    <header><h3>Implementing FSM Coverage</h3></header>

    <ul>
      <li>Designers typically use <code>ChiselEnum</code> to specify FSM states</li>
      <li>The FSM coverage pass designates registers that contain values from a <code>ChiselEnum</code> as FSM state registers</li>
      <li>We analyze each next state expression to determine feasible transitions</li>
    </ul>

    <img src="./figs/sic-asplos23/coverage_fsm_coverage.svg" width=90% />
  </article>
  -->

  <article>
    <header><h3>Overhead of Coverage Instrumentation</h3></header>
    <!--
    <p class="center">Coverage instrumentation implemented via hardware IR compiler passes has benefits</p>

    <ul>
      <li>Unifies coverage specification and report generation across simulators</li>
      <li>Makes merging coverage across simulators easy</li>
    </ul>
    -->

    <p class="center">Does our coverage instrumentation methodology come with performance overheads over a simulator's "built-in" coverage instrumentation?</p>

    <img src="./figs/sic-asplos23/sic-overhead.png" width=80% />

    <p class="center">There is no performance overhead! <small></small></p>
  </article>

  <article>
    <header><h3>Coverage for FPGA Emulation (Firesim)</h3></header>

    <ul>
      <li>Adding support for the FIRRTL <code>cover</code> primitive adds support for all coverage metrics!</li>
    </ul>

    <img src="./figs/sic-asplos23/coverage_firesim_scan_chain.svg" width=80% />

    <ul>
      <li>The <code>cover</code> primitive is implemented with a saturating counter connected to a scan chain</li>
    </ul>
  </article>

  <article>
    <header><h3>Area Overhead of Firesim Coverage</h3></header>

    <img src="./figs/sic-asplos23/firesim_utilization.png" width=80% />
    <ul>
      <li>8-bit coverage counters provide sufficient resolution with minimal overhead</li>
    </ul>
  </article>

  <!--
  <article>
    <header><h3>Performance Overhead of Firesim Coverage</h3></header>

    <img src="./figs/sic-asplos23/firesim_fmax.png" width=80% />

    <ul>
      <li>Similarly, \(f_{max}\) is not affected for small counter widths</li>
    </ul>
  </article>
  -->

  <!--
  <article>
    <header><h3>Coverage Merging and Pruning</h3></header>

    <ul>
      <li>Instrumenting every coverpoint for Firesim is wasteful since many coverpoints are trivially covered in RTL simulation</li>
      <li>By pruning coverpoints that were covered 10+ times in RTL simulation with a RISC-V test suite, we can <em>prune the number of coverpoints by <strong>42%</strong></em></li>
    </ul>
  </article>
  -->

  <article>
    <header><h3>Extensive Simulator Support</h3></header>

    <img src="./figs/sic-asplos23/upshot.svg" width=100% />

    <ul>
      <li>Before this work, Verilator only supported line and toggle coverage. The other simulators didn't support any coverage.</li>
      <li>Now, three RTL simulators (Verilator, Treadle, ESSENT), an FPGA-based simulator (Firesim), and a formal tool (Symbiyosys) support all these coverage metrics</li>
    </ul>
  </article>

{% endblock %}
