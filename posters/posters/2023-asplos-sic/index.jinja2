{% extends "templates/slice/slice.jinja2" %}

{## Header ##}

{% set poster_title = "Simulator Independent Coverage for RTL Hardware Languages" %}
{# ‘poster_subtitle’ is optional; use "" to hide it #}
{% set poster_subtitle = "" %}
{# Change ‘venue’ to a conference or workshop name if any #}
{% set venue = "ASPLOS 2023" %}
{# ‘webpage_title’ is displayed in the browser’s top bar #}
{% set webpage_title = poster_title + " — " + venue %}
{# ‘project_url’ is used in the footer and for the logo #}
{% set project_url = "https://kevinlaeufer.com/papers/simulator_independent_coverage_asplos2023.html" %}

{# Publication info is hidden by default (.publication-info in CSS) #}
{% set pub_datetime_iso = "2023-03-25" %}
{% set pub_date = "March 25, 2023" %}

{# Custom styles and JS for a particular poster #}
{% block custom_head %}
{% endblock %}
{% block authors %}
  {# Put authors here, with one link per author. #}
  <a property="author">Kevin Laeufer<sup>a</sup></a>,
  <a property="author">Vighnesh Iyer<sup>a</sup></a>,
  <a property="author">David Biancolin<sup>b</sup></a>,
  <a property="author">Jonathan Bachrach<sup>c</sup></a>,
  <a property="author">Borivoje Nikolić<sup>a</sup></a>,
  <a property="author">Koushik Sen<sup>a</sup></a>
{% endblock %}

{% block affiliations %}
  <sup>a</sup><a property="sourceOrganization">University of California, Berkeley</a>,
  <sup>b</sup><a property="sourceOrganization">SiFive</a>,
  <sup>c</sup><a property="sourceOrganization">JITX</a>
{% endblock %}

{### Footer ##}

{% block footer_left %}
  <address class="monospace" style="font-weight:400;">
    <a href="{{ project_url }}">{{ project_url }}</a>
  </address>
{% endblock %}

{% block footer_center %}
  <address class="monospace" style="font-weight:400;">
    {laeufer, vighnesh.iyer, biancolin, bora, ksen}@eecs.berkeley.edu,
    jrb@pobox.com
  </address>
{% endblock %}

{% block footer_right %}
  <address>
    ASPLOS 2023
  </address>
{% endblock %}

{### Contents ###}

{# Contents are individual boxes (typically ‘article’s or ‘figure’s).  Each
   ‘article’ contains a header and some contents. #}
{% block contents %}
<article>
<header><h3>Coverage: Who tests the testers?</h3></header>
<img src="./figs/sic-asplos23/coverage_poster_why_coverage.svg" />
</article>

<article>
<header><h3>Problem 1: Most open-source simulators lack coverage</h3></header>
<ul>
  <li>Verilator only supports line and toggle coverage</li>
  <li>Treadle (Chisel interpreter), ESSENT and FireSim have no coverage support</li>
</ul>
</article>

<article>
<header><h3>Problem 2: Verilog coverage is an inadequate replacement for native Chisel coverage</h3></header>
<img src="./figs/sic-asplos23/3_coverage_line_coverage_of_verilog.svg" style="width: 80%;" />
<figcaption>
In this example, the translation to structural Verilog
replaces a branch with a conditional assignment. Therefore,
100% line coverage on the generated Verilog does not necessarily
imply complete line coverage of the Chisel source.
</figcaption>
</article>

<article>
<header><h3>Our Solution: Simulator Independent Coverage</h3></header>
<img src="./figs/sic-asplos23/coverage_poster_overview.svg" style="width: 95%;" />
<figcaption>
We show how a single new <code>cover</code> statement allows us to move all coverage instrumentation into the FIRRTL compiler.
Adding support for the <code>cover</code> statement to a simulator is fairly simple.
</figcaption>
</article>



<article>
<header><h3>Line Coverage</h3></header>
<img src="./figs/sic-asplos23/5_coverage_line_coverage.svg" style="width: 80%;" />
<figcaption>
The line coverage pass instruments every <code>when</code>
statement in the FIRRTL circuit. The mapping from lines to
branches is used to generate the coverage report from the
counts reported by the simulator.
</figcaption>
</article>



<article>
<header><h3>Finite State Machine Coverage</h3></header>
<img src="./figs/sic-asplos23/7_coverage_fsm_coverage.svg" style="width: 80%;" />
<figcaption>
Finite state machine (FSM) coverage assumes that
the state register uses a ChiselEnum. We first analyze all possible
next states by simplifying the state update expression for
each possible current state. We then add cover statements
for all states and possible transitions.
</figcaption>
</article>

<article>
<header><h3>Verilator: <code>cover</code> Statement Support</h3></header>
<img src="./figs/sic-asplos23/cover.svg" style="width: 80%;" />
</article>


<article>
<header><h3>Verilator: Coverage Instrumentation Overhead</h3></header>
<img src="./figs/sic-asplos23/8_verilator_overhead.png" width=60% />
<figcaption>
Coverage instrumentation overhead on Verilator
v4.034. For TLRAM, the measured overhead of our FIRRTL
line coverage is close to zero.
</figcaption>
</article>

<article>
<header><h3>The <code>cover</code> Statement</h3></header>
<img src="./figs/sic-asplos23/presentation_cover.svg" style="width: 80%;" />
<figcaption>
</figcaption>
</article>

<article>
<header><h3>Toggle Coverage</h3></header>
<img src="./figs/sic-asplos23/6_coverage_toggle_coverage.svg" style="width: 70%;" />
<figcaption>
The toggle coverage pass adds a register and a xor
gate. It avoids redundant instrumentation for signals that
always have the same value.
</figcaption>
</article>





<article>
<header><h3>FireSim: <code>cover</code> Statement Support on FPGA</h3></header>
<img src="./figs/sic-asplos23/4_coverage_firesim_scan_chain.svg" width=70% />
<figcaption>We generate saturating counters and a scan chain
  for all <code>cover</code> statements for FPGA-accelerated simulation
  with FireSim.</figcaption>
</article>

  <article>
    <header><h3>FireSim: Utilization and \(f_{max}\)</h3></header>
    <div class="columns-center" style="grid-template-columns: 50fr 50fr">
    <img src="./figs/sic-asplos23/9_firesim_utilization.png" width=100% />
    <img src="./figs/sic-asplos23/10_firesim_fmax.png" width=100% />
    </div>
  </article>


<article>
<header><h3>Extensive Simulator Support</h3></header>
<img src="./figs/sic-asplos23/upshot.svg" width=100% />
</article>


<article style="display:grid; align-content:center;">

<div class="columns-center" style="grid-template-columns: 60fr 40fr"><div>
<header><h3>More Features</h3></header>
<ul>
  <li>Applicable to other hardware languages.</li>
  <li>Feedback-Directed Fuzz Testing</li>
  <li>Coverage merging</li>
  <li>Formal cover trace generation</li>
</ul>
</div><div>
<img src="./figs/sic-asplos23/project_page_qr.png" style="width: 116%; max-width: none; position:relative; right:24px; margin-top:-10px;" />
<figcaption>Paper PDF, Code & Slides</figcaption>
</div></div>
</article>


{% endblock %}
