{% extends "templates/slice/slice.jinja2" %}

{## Header ##}
{% set poster_title = "Chisel Recipes: An eDSL for Imperative Control Flow Machines" %}
{# ‘poster_subtitle’ is optional; use "" to hide it #}
{% set poster_subtitle = "" %}
{# Change ‘venue’ to a conference or workshop name if any #}
{% set venue = "SLICE Summer 2023 Retreat" %}
{# ‘webpage_title’ is displayed in the browser’s top bar #}
{% set webpage_title = poster_title %}
{# ‘project_url’ is used in the footer and for the logo #}
{% set project_url = "https://github.com/bdngo/chisel-recipes" %}

{# Publication info is hidden by default (.publication-info in CSS) #}
{% set pub_datetime_iso = "2023-05-21" %}
{% set pub_date = "May 21, 2023" %}

{# Custom styles and JS for a particular poster #}
{% block custom_head %}
{% endblock %}

{% block authors %}
  {# Put authors here, with one link per author. #}
  <a property="author">Vighnesh Iyer</a>,
  <a property="author">Bryan Ngo</a>,
  <a property="author">Bora Nikolic</a>
{% endblock %}

{% block affiliations %}
  <a property="sourceOrganization">UC Berkeley</a>
{% endblock %}

{### Footer ##}

{% block footer_left %}
  <a href="{{ project_url }}">{{ project_url }}</a>
{% endblock %}

{% block footer_center %}
    {vighnesh.iyer, bryanngo}@berkeley.edu
{% endblock %}

{% block footer_right %}
  <span class="credits">
    SLICE Retreat, Summer 2023
  </span>
{% endblock %}

{### Contents ###}

{# Contents are individual boxes (typically ‘article’s or ‘figure’s).  Each
   ‘article’ contains a header and some contents. #}
{% block contents %}
<article>
  <header><h3>Motivation</h3></header>

  <p class="center">Conversion of imperative control flow to its FSM encoding is a common, mechanical, and error-prone process in RTL design</p>

  <pre><code class="language-scala">io.ready = true
waitUntil(io.valid)
data = io.bits
while(popcount(data) >= 3) {
    data = data >> 1
}</code></pre>
</article>

<article>
  <header><h3>Why Not HLS?</h3></header>

  <p class="center">High-level synthesis can automatically convert a subset of C to RTL, including imperative control flow. <em>But:</em></p>

  <ul>
    <li>HLS-ed code is designed to work as a standalone circuit rather than being closely integrated with hand-written RTL</li>
    <li>HLS does not give fine control over cycle-level timing</li>
    <li>HLS frontends are often in a different language than the RTL HDL</li>
  </ul>
</article>

<article>
  <header><h3>Our Proposal</h3></header>
  <p class="center"><a href="">chisel-recipes</a> is an embedded DSL for describing and compiling control flow machines at cycle granularity</p>

  <pre><code class="language-scala">val data = Reg(...)
recipe (
  action { io.ready := true.B },
  waitUntil(io.valid),
  action { data := io.bits },
  tick(),
  whileLoop(popcount(data) >= 3.U) {
      action { data := data >> 1.U }
  }
).compile()</code></pre>
</article>

<article>
  <header><h3>chisel-recipes Primitives</h3></header>

  <p class="center">The control flow primitives in <code>chisel-recipes</code> are modeled after those in Blarney (an eDSL embedded in Haskell)</p>

  <ul>
    <li><code>Action</code>: Combinational immediate assignments composed of arbitrary Chisel code</li>
    <li><code>Tick</code>: Advance one cycle</li>
    <li><code>Recipe</code>: Execute sub-recipes in sequential order</li>
    <li><code>While</code>: Execute the body until the condition is false</li>
    <li><code>When</code> / <code>ITE</code>: Conditionally execute a sub-recipe</li>
    <li><code>Parallel</code>* / <code>Background</code>*: Concurrently execute sub-recipes</li>
  </ul>
</article>

<article>
  <header><h3>Recipe Combinators</h3></header>

  <p class="center">Since recipe primitives are just Scala datatypes, regular Scala functions can be used to construct new recipes.</p>

  <pre><code class="language-scala medium">def waitUntil(cond: chisel3.Bool): Recipe =
    whileLoop(cond, tick())
def forever(r: Recipe): Recipe =
    whileLoop(true.B, r)</code></pre>

  <p class="center">Recipes can be defined and composed just like Chisel circuits.</p>

  <pre><code class="language-scala small">def fetchDecoupled[T](io: DecoupledIO[T], dataReg: T) =
  recipe (
    waitUntil(io.valid, active=io.ready),
    action { data := io.bits },
    tick()
  )</code></pre>

  <p class="center">Recipes have an <code>active</code> signal, which can be used in the RTL.</p>
</article>

<!--
<article>
  <header><h3>Recipe Composition</h3></header>
</article>
-->

<article>
  <header><h3>Example - AXI4-Lite Slave</h3></header>

  <pre><code class="language-scala small">val readOnce = recipe (
  waitUntil(axi.ar_valid === 1.B, active=axi.ar_ready),
  action {
    axi.r_data := mem.read(axi.ar_addr)
    axi.r_valid := 1.B
  },
  waitUntil(axi.r_ready === 1.B, active=axi.r_valid),
  tick()
)
forever(readOnce).compile()</code></pre>
</article>

<article>
  <header><h3>Example - Decoupled GCD Circuit</h3></header>

  <pre><code class="language-scala medium">doWhile (
  waitUntil(input.valid, active=input.ready),
  action {
    x := input.bits.value1
    y := input.bits.value2
  },
  tick(),
  whileLoop(x > 0.U && y > 0.U)(
    action {
      when(x > y) {
        x := x - y
      }.otherwise {
        y := y - x
      }
    },
    tick()
  ),
  action {
    when(x === 0.U) {
      output.bits.gcd := y
    }.otherwise {
      output.bits.gcd := x
    }
  },
  waitUntil(output.ready, active=output.valid),
)(cond=true.B).compile()</code></pre>
</article>

<article>
  <header><h3>Compiling Recipes</h3></header>

  <img src="./figs/recipes/recipe_compilation.svg" style="background:white; padding-top: 1rem; padding-bottom:1rem;"/>

  <ul>
    <li>Each recipe primitive is a small circuit with top-level <code>go</code> and <code>done</code> signals <small>(the active signal is also elaborated if used)</small></li>
    <li><code>go</code> and <code>done</code> are single-cycle wide pulses</li>
    <li>Recipes are compiled recursively and are driven with a pulse generator at the top-level</li>
  </ul>
</article>

<article>
  <header><h3>Debugging Recipes - Printf Instrumentation</h3></header>

  <p class="center">When compiling a recipe, it can be instrumented with Chisel <code>printf</code>s with source locators.</p>

  <pre><code class="small language-text">time=[0] [doWhile] has started (GCDRecipe.scala:1)
time=[0] [waitUntil] has started (GCDRecipe.scala:2)
time=[0] [waitUntil] has finished (GCDRecipe.scala:2)
time=[0] [action] is active (GCDRecipe.scala:3)
time=[0] [tick] about to tick (GCDRecipe.scala:7)

time=[1] [whileLoop] has started (GCDRecipe.scala:8)
time=[1] [action] is active (GCDRecipe.scala:9)
time=[1] [tick] about to tick (GCDRecipe.scala:16)</code></pre>
</article>

<article>
  <header><h3>Debugging Recipes - Waveform Instrumentation</h3></header>

  <img src="./figs/recipes/waveform_debugging.png" />

  <p class="center">All recipe primitives and combinators have named go/active/done signals with source locators, injected in the RTL.</p>
</article>

<article>
  <header><h3>Conclusion and Future Work</h3></header>

  <ul>
    <li>New eDSLs leveraging existing embedded HDLs (Chisel) are powerful and useful</li>
    <li>Chisel recipes is a new eDSL with immediate value to RTL designers</li>
    <li>Future work: optimized recipes with static analysis, PPA tradeoff analysis, bounded fork/join functionality, demonstrate applications in accelerator / peripheral / cache design</li>
  </ul>
</article>
{% endblock %}
