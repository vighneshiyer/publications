#!/usr/bin/env python

import sys
from argparse import ArgumentParser
import time
import fnmatch
import asyncio
from playwright.async_api import async_playwright
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileCreatedEvent, FileModifiedEvent

def main():
    parser = ArgumentParser()
    parser.add_argument("--url", type=str, required=True, help="poster URL to print")
    parser.add_argument("--outputFile", type=str, required=True, help="path to output PDF file")
    parser.add_argument("--scale", type=int, required=True, choices=range(10, 201), metavar="[10-200]", help="scaling factor")
    parser.add_argument("--width", type=str, default="40in", help="poster width, see https://playwright.dev/python/docs/api/class-page#page-pdf for options")
    parser.add_argument("--height", type=str, default="30in", help="poster height")
    parser.add_argument("--watch", action="store_true", help="watch for changes and regenerate the PDF file live")
    args = parser.parse_args()
    scale = round(args.scale / 100, 2)

    with async_playwright() as playwright:
        print("Launching headless chromium")
        browser = await playwright.chromium.launch()
        print(f"Browsing to {args.url}")
        page = await browser.new_page()
        await page.goto(args.url)
        await page.wait_for_load_state("networkidle")
        print("Page loaded")
        print("Dumping PDF")
        await page.pdf(path=args.outputFile, scale=scale, width=args.width, height=args.height, print_background=True)

        
        if args.watch:
            print("Watching for changes...")
            observer = Observer()
            event_handler = PDFRefresher(page, args, scale)
            observer.schedule(event_handler, path="./", recursive=True)
            observer.start()
            try:
                while True:
                    time.sleep(1)
            finally:
                observer.stop()
                observer.join()
                browser.close()
                sys.exit(0)
        else:
            await browser.close()
            sys.exit(0)

class PDFRefresher(FileSystemEventHandler):
    def __init__(self, page, args, scale):
        self.page = page
        self.args = args
        self.scale = scale
        self.loading = False

    def on_any_event(self, event):
        if isinstance(event, FileCreatedEvent) or isinstance(event, FileModifiedEvent):
            if fnmatch.fnmatch(event.src_path, "*.scss") or fnmatch.fnmatch(event.src_path, "*.jinja2"):
                #if self.loading == True:
                #    continue  # throw away new events if a previous event is still being processed
                self.loading = True
                self.page.reload(wait_until="networkidle")
                self.page.pdf(path=self.args.outputFile, scale=self.scale, width=self.args.width, height=self.args.height, print_background=True)
                self.loading = False

if __name__ == "__main__":
    main()
