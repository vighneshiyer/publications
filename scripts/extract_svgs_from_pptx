#!/usr/bin/env python

import argparse
from pathlib import Path
import shutil
import subprocess
import sys
import pdb
import xml.etree.ElementTree as ET
from utils import *

# This script 'works', but Libreoffice doesn't render all PPTX files correctly
# A safer bet is to use the extract_svgs_from_pdf_slides script, but you will have to specify the filenames on the CLI

def main():
    parser = argparse.ArgumentParser(description="Convert Google Slides PPTX to an SVG per slide. The filename (without the .svg suffix) for each exported SVG comes from the presenter notes for each slide.")
    parser.add_argument("--working-dir", default='work', help="The working directory used by this script")
    parser.add_argument("--out-dir", default='.', help="The directory where the extracted svg files will be placed")
    parser.add_argument("--dont-use-poppler", default=False, action="store_true", help="Don't use poppler to import PDFs in inkscape before SVG export.")
    parser.add_argument("--keep-work", default=False, action="store_true", help="Don't delete the working directory")
    parser.add_argument("input", help="PPTX file")
    args = parser.parse_args()
    cwd = Path.cwd()
    working_dir_path = Path(args.working_dir)
    out_dir_path = Path(args.out_dir)
    pptx = Path(args.input)

    # Create the working directory (first, deleting it if it already exists)
    if working_dir_path.exists():
        shutil.rmtree(working_dir_path)
    working_dir_path.mkdir()

    # Extract the presenter notes from the PPTX which are the output SVG file names
    run_cmd(f"unzip -q \"{pptx.absolute()}\" -d {working_dir_path}", cwd)
    svg_filenames = []
    for file in sorted((working_dir_path / "ppt" / "notesSlides").glob("notesSlide*.xml")):
        tree = ET.parse(file)
        root = tree.getroot()
        texts = [x.text for x in root.iter() if x.text is not None]
        svg_filenames.append(''.join(texts))

    # Convert the PPTX to a PDF
    run_cmd(f"soffice --headless --convert-to pdf --outdir {working_dir_path.absolute()} \"{pptx.absolute()}\"", cwd)

    # Split the PDF into PDFs for each page
    pdf_full_file = pptx.with_suffix(".pdf").name.replace(' ', '\\ ')
    run_cmd(f"pdfseparate {pdf_full_file} page%d.pdf", cwd=working_dir_path)

    # Verify that the number of pages equals the number of svg_filenames
    pdfs = sorted(list(working_dir_path.glob("page*.pdf")))
    assert len(pdfs) == len(svg_filenames), f"There are {len(pdfs)} slides in the PPTX, but {len(svg_filenames)} slides have presenter notes with the desired SVG filename"

    # Convert each PDF to a SVG
    for pdf in pdfs:
        pdf_to_svg(pdf, not args.dont_use_poppler, working_dir_path)

    # Strip the background and slide paths for each SVG file
    svgs = sorted(list(working_dir_path.glob("*.svg")))
    out_dir_path.mkdir(exist_ok=True)
    for i, svg in enumerate(svgs):
        strip_svg_background(input_svg=svg, dest_svg=(out_dir_path / f"{svg_filenames[i]}.svg"),
                             poppler=not args.dont_use_poppler, wd=working_dir_path)

    # If we got here, then delete the working directory
    if not args.keep_work:
        shutil.rmtree(working_dir_path)
    sys.exit(0)

if __name__ == "__main__":
    main()
