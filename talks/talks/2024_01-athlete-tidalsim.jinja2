{% extends "base/base.jinja2" %}

{# HTML title #}
{% set webpage_title = "ATHLETE Meeting - TidalSim: Fast and Accurate Microarchitectural Simulation via Sampled RTL Simulation" %}
{# Short description #}
{% set description = "A Unified Microarchitectural Simulation Framework to Identify and Leverage Unique Aspects of Workloads on Heterogeneous SoCs for Power and Performance Estimation and Verification" %}
{# List of authors #}
{% set author = "Vighnesh Iyer" %}
{# Change ‘venue’ to a conference or workshop name if any #}
{% set venue = "ATHLETE (Jan 2024)" %}
{# Publication info (hidden by default) #}
{% set pub_datetime_iso = "2024-01-20" %}
{% set pub_date = "January 20, 2024" %}

{# Custom styles and JS for a particular talk #}
{% block custom_head %}
<style>
.reveal h2 {
  margin-top: 1rem !important;
}
.comparison_table {
  width: 100%;
  font-size: 60%;
  border-collapse: separate !important;
  thead > tr > th:first-child {
    border-right: 2px solid #222222;
  }
  tbody > tr > td:first-child {
    border-right: 2px solid #222222;
  }
}
</style>
{% endblock %}

{% block theme %}
import '/themes/remark-ish.scss'
import 'reveal.js/plugin/highlight/monokai.css'
{% endblock %}

{% set center = false %}

{% set rightarrow = "<strong>→</strong>" %}

{% block slides %}
<section class="center">
  <h1>TidalSim: Fast and Accurate Microarchitectural Simulation via Sampled RTL Simulation</h1>
  <h3 style="font-weight: 500;">Vighnesh Iyer, Raghav Gupta, Dhruv Vaish, Charles Hong, Sophia Shao, Bora Nikolic</h3>
  <h3 style="font-weight: normal;">ATHLETE Meeting</h3>
  <h4 style="font-weight: normal;">Monday, January 22nd, 2024</h4>
</section>

<section>
  <h2>Talk Outline</h2>
  <ol>
    <li>Motivation</li>
    <li>Our proposal</li>
    <li>Background and prior work in microarchitectural simulation and sampling</li>
    <li>Implementation of TidalSim v0.1</li>
    <li>Results for IPC trace reconstruction</li>
    <li>Next steps towards TidalSim v1</li>
    <li>Leveraging TidalSim for coverpoint synthesis</li>
  </ol>
</section>

<section>
<section class="center">
  <h2>Motivation</h2>
</section>

<section>
  <h2 style="font-size:2rem;">The New-Era of Domain-Specialized Heterogeneous SoCs</h2>

  <div class="r-stack">
    <div class="fragment fade-in-then-out" style="display: grid; place-items: center;">
      <img width="80%" src="./figs/quals/a17_pro.jpg">
      <figcaption class="small center">{% include "./figs/quals/a17_pro.jinja2" %}</figcaption>
    </div>
    <div class="fragment fade-in-then-out" style="display: grid; place-items: center;">
      <img width="40%" src="./figs/quals/m3_max.jpg">
      <figcaption class="small center">{% include "./figs/quals/m3_max.jinja2" %}</figcaption>
    </div>
    <div class="fragment fade-in">
      <ul>
        <li class="fragment">Two trends in SoC design:
          <ul>
            <li>Heterogeneous cores targeting different power/perf curves + workloads</li>
            <li>Domain-specific accelerators</li>
          </ul>
        </li>
        <li class="fragment">Need a pre-silicon evaluation strategy for rapid, PPA optimal design of these units
          <ul>
            <li>Limited time per design cycle {{ rightarrow }} limited time per evaluation</li>
            <li>More evaluations = more opportunities for optimization</li>
          </ul>
        </li>
      </ul>
    </div>
  </div>
</section>

<section>
  <h2 style="font-size: 2rem;">The Microarchitectural Iteration Loop (Industry)</h2>

  <div class="container" style="grid-template-columns: 1fr 1fr;">
    <div class="fragment">
      <img src="./figs/dynamic/tidalsim/uarch_iteration_flow_v2.svg" />
      <figcaption class="small center">An idealized iteration loop for microarchitectural design. The 'Evaluator' starts off as a performance simulator and transitions to RTL as the design is iterated.</figcaption>
    </div>
    <div>
      <img class="fragment" src="./figs/dynamic/tidalsim/industry_flow.svg" />
      <figcaption class="small fragment center">During RTL implementation we need performance validation against the model.</figcaption>
      <img width="70%" class="fragment" src="./figs/dynamic/tidalsim/industry_flow2.svg" />
      <figcaption class="small fragment center">Existing techniques for RTL performance validation</figcaption>
    </div>
  </div>

  <p class="center fragment">Rapid <strong><em>RTL performance validation</em></strong> that can be used in the RTL design cycle is valuable.</p>
</section>

<section>
  <h2 style="font-size: 2rem;">The Microarchitectural Iteration Loop (Academia)</h2>
  <!-- Using RTL in evaluation has been too difficult -->

  <div class="center">
    <img class="fragment" src="./figs/dynamic/tidalsim/academic_flow.svg" />
    <figcaption class="small center fragment">The typical manner in which microarchitectural ideas are evaluated in academia.</figcaption>
  </div>

  <p class="center fragment">Academics rarely write RTL partly due to the difficulty of evaluation, instead opting for uArch simulators.</p>

  <p class="center fragment">Academia needs rapid RTL evaluation as a part of an <em><strong>RTL-first research methodology</strong></em></p>
</section>

<section>
  <h2>Limitations of Existing Evaluators</h2>

  <div class="center">
    <img width="40%" src="./figs/dynamic/tidalsim/uarch_iteration_flow_v2.svg" />
  </div>

  <ul class="small">
    <li class="fragment"><strong>ISA simulation</strong>: no accuracy</li>
    <li class="fragment"><strong>Trace/Cycle uArch simulation</strong>: low accuracy</li>
    <li class="fragment"><strong>RTL simulation</strong>: low throughput</li>
    <li class="fragment"><strong>FPGA prototyping</strong>: high startup latency</li>
    <li class="fragment"><strong>HW emulators</strong>: high cost</li>
  </ul>

  <p class="center fragment">We will propose a <em>simulation methodology</em> that can deliver on all axes (accuracy, throughput, startup latency, cost).</p>
</section>
</section>

<section>
<section class="center">
  <h2>Our Proposal</h2>
</section>

<section>
  <h2>TidalSim Overview</h2>

  <div class="center">
    <img src="./figs/dynamic/tidalsim/uarch_iteration_flow_tidalsim_simple.svg" />
    <figcaption class="smallish center"><strong>TidalSim</strong>: a fast, accurate, low latency, low cost microarchitectural <em>simulation methodology</em> that produces RTL-level collateral for performance estimation and verification on real workloads.</figcaption>
  </div>
</section>

<section>
  <h2>TidalSim Components</h2>

  <div class="center fragment">
    <img src="./figs/dynamic/tidalsim/tidalsim_components_simple.svg" />
    <figcaption class="fragment small center">Overview of the components of TidalSim.</figcaption>
  </div>

  <p class="center fragment">TidalSim is <em>not</em> a new simulator. It is a <em>simulation methodology</em> that combines the strengths of architectural simulators, uArch models, and RTL simulators.</p>
</section>

<section>
  <h2>TidalSim Execution</h2>

  <div class="center fragment">
    <img width="70%" src="./figs/multi-level-sim/tidalsim_time_domain.svg" style="margin-top:-1rem;"/>
    <figcaption class="fragment smallish center" style="margin-top:-1.5rem;">TidalSim moves simulation execution back and forth between architectural, uArch, and RTL simulators based on dynamic workload analysis.</figcaption>
  </div>
</section>

<section>
  <h2>What Could Our Proposal Enable?</h2>

  <div class="r-stack">
    <div class="fragment fade-in-then-out" style="display: grid; place-items: center; width: 80%;">
      <h3 class="center">Industry</h3>
      <img src="./figs/dynamic/tidalsim/industry_flow2.svg" height="100%" />
      <figcaption style="margin-top: 1rem;" class="center">RTL performance validation is too costly.</figcaption>
    </div>

    <div class="fragment fade-in-then-out" style="display: grid; place-items: center; width: 80%;">
      <h3 class="center">Industry</h3>
      <img src="./figs/dynamic/tidalsim/industry_flow_new.svg" height="100%" />
      <figcaption style="margin-top: 1rem;" class="center">Rapid RTL performance validation becomes viable.</figcaption>
    </div>

    <div class="fragment fade-in-then-out" style="display: grid; place-items: center; width: 80%;">
      <h3 class="center">Academia</h3>
      <img src="./figs/dynamic/tidalsim/academic_flow.svg" height="100%" />
      <figcaption style="margin-top: 1rem;" class="center">Academics resort to inaccurate uArch simulators.</figcaption>
    </div>

    <div class="fragment fade-in" style="display: grid; place-items: center; width: 80%;">
      <h3 class="center">Academia</h3>
      <img src="./figs/dynamic/tidalsim/academic_flow_new.svg" height="100%" />
      <figcaption style="margin-top: 1rem;">RTL-first evaluation strategy becomes viable.</figcaption>
    </div>
  </div>

  <p class="fragment center">TidalSim <strong>enables new design methodologies</strong> for industry, academia, and lean chip design teams.</p>
</section>

</section>

<section>
<section class="center">
<h2>Background and Prior Work</h2>
</section>

<section>
  <h2>Simulator Metrics</h2>

  <p class="center fragment">Simulation techniques span the gamut on various axes. Each simulation technique assumes <em>a particular hardware abstraction</em>.</p>

  <ul class="smallish">
    <li class="fragment"><strong>Throughput</strong>
      <ul><li>How many instructions can be simulated per real second? (MIPS = millions of instructions per second)</li></ul>
    </li>
    <li class="fragment"><strong>Accuracy</strong>
      <ul><li>Do the output metrics of the simulator match those of the modeled SoC in its real environment?</li></ul>
    </li>
    <li class="fragment"><strong>Startup latency</strong>
      <ul><li>How long does it take from the moment the simulator's parameters/inputs are modified to when the first instruction is executed?</li></ul>
    </li>
    <li class="fragment"><strong>Cost</strong>
      <ul>
        <li>What hardware platform does the simulator run on?</li>
        <li>How much does it cost to run a simulation?</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2>Existing Hardware Simulation Techniques</h2>

  <table class="comparison_table">
    <thead><tr>
      <th></th>
      <th>Examples</th>
      <th>Throughput</th>
      <th>Latency</th>
      <th>Accuracy</th>
      <th>Cost</th>
    </tr></thead>
    <tbody>
    <tr class="fragment">
      <td>JIT-based Simulators / VMs</td>
      <td>qemu, KVM, VMWare Fusion</td>
      <td class="bg-green">1-3 GIPS</td>
      <td class="bg-green">&lt;1 second</td>
      <td class="bg-red">None</td>
      <td class="bg-green">Minimal</td>
    </tr>
    <tr class="fragment">
      <td>Architectural Simulators</td>
      <td>spike, dromajo</td>
      <td class="bg-green">10-100+ MIPS</td>
      <td class="bg-green">&lt;1 second</td>
      <td class="bg-red">None</td>
      <td class="bg-green">Minimal</td>
    </tr>
    <tr class="fragment">
      <td>General-purpose μArch Simulators</td>
      <td>gem5, Sniper, ZSim, SST</td>
      <td class="bg-orange">100 KIPS (gem5) - 100 MIPS (Sniper)</td>
      <td class="bg-green">&lt;1 minute</td>
      <td class="bg-orange">10-50% IPC error</td>
      <td class="bg-green">Minimal</td>
    </tr>
    <tr class="fragment">
      <td>Bespoke μArch Simulators</td>
      <td>Industry performance models</td>
      <td class="bg-orange">≈ 0.1-1 MIPS</td>
      <td class="bg-green">&lt;1 minute</td>
      <td class="bg-green">Close</td>
      <td class="bg-red">$1M+</td>
    </tr>
    <tr class="fragment">
      <td>RTL Simulators</td>
      <td>Verilator, VCS, Xcelium</td>
      <td class="bg-red">1-10 KIPS</td>
      <td class="bg-orange">2-10 minutes</td>
      <td class="bg-green">Cycle-exact</td>
      <td class="bg-green">Minimal</td>
    </tr>
    <tr class="fragment">
      <td>FPGA-Based Emulators</td>
      <td>Firesim</td>
      <td class="bg-green">≈ 10 MIPS</td>
      <td class="bg-red">2-6 hours</td>
      <td class="bg-green">Cycle-exact</td>
      <td class="bg-orange">$10k+</td>
    </tr>
    <tr class="fragment">
      <td>ASIC-Based Emulators</td>
      <td>Palladium, Veloce</td>
      <td class="bg-green">≈ 0.5-10 MIPS</td>
      <td class="bg-orange">&lt;1 hour</td>
      <td class="bg-green">Cycle-exact</td>
      <td class="bg-red">$10M+</td>
    </tr>
    <tr class="fragment">
      <td>Multi-level Sampled Simulation</td>
      <td><strong>TidalSim</strong></td>
      <td class="bg-green">10+ MIPS</td>
      <td class="bg-green">&lt;1 minute</td>
      <td class="bg-green">&lt;1% IPC error</td>
      <td class="bg-green">Minimal</td>
    </tr>
    </tbody>
  </table>

  <p class="center fragment smallish">TidalSim combines the strengths of each technique to produce a meta-simulator that achieves high throughput, low latency, high accuracy, and low cost.</p>
</section>

<section>
  <h2>Accuracy of Microarchitectural Simulators</h2>

  <div class="center r-stack">
    <div class="fragment fade-in-then-out" style="display: grid; place-items: center;">
      <img width="80%" src="./figs/quals/uarch_simulator_study-ipc2.png" />
      <figcaption class="small center">Raw IPC errors on 64-bit workloads vs real Haswell<sup>[1]</sup>. Microarchitectural simulators have substantial errors exceeding 20%.
      </figcaption>
    </div>
    <div class="fragment fade-in" style="display: grid; place-items: center;">
      <img width="80%" src="./figs/quals/uarch_simulator_study-branch_predictor.png" />
      <figcaption class="small center">Impact of using a bimodal branch predictor vs the Haswell BP<sup>[1]</sup>.
      Simulators disagree with each other! The sensitivity of each simulator is wildly different!
      </figcaption>
    </div>
  </div>

  <!-- Trends aren't enough - see the sensitivity differences of these simulators! Gradients are critical! -->
  <!-- if these detailed uArch models aren't good enough wrt accuracy, then throw the rest of the less detailed ones away too! -->

  <p class="smallish fragment center">Trends aren't enough<sup>[2]</sup>. Note the sensitivity differences - gradients are critical!</p>
  <p class="smallish fragment center">uArch simulators are <strong>not accurate enough</strong> for microarchitectural evaluation.</p>

  <div>
  <hr>
  <div class="verysmall">
    <p class="footnote" style="margin:0;">
    [1]: Akram, A. and Sawalha, L., 2019. A survey of computer architecture simulation techniques and tools. IEEE Access<br />
    [2]: Nowatzki, T., Menon, J., Ho, C.H. and Sankaralingam, K., 2015. Architectural simulators considered harmful. Micro.
    </p>
  </div>
  </div>
</section>

<section>
  <h2>Sampled Simulation</h2>

  <p class="center fragment">Instead of running the entire program in uArch simulation, run the entire program in <em>functional simulation</em> and only run <em>samples</em> in uArch simulation</p>

  <div class="fragment center">
    <img width="60%" src="./figs/multi-level-sim/sampled_simulation0.png" />
  </div>

  <p class="fragment center">The full workload is represented by a selection of <em>sampling units</em>.</p>

  <ol class="smallish">
    <li class="fragment">How should sampling units be selected?</li> <!-- sampling methodology -->
    <li class="fragment">How can we accurately estimate the performance of a sampling unit?</li> <!-- functional and detailed warmup -->
    <li class="fragment">How can we estimate errors when extrapolating from sampling units?</li> <!-- error bounding via CLT or other heuristics -->
  </ol>
</section>

<section>
  <h2>Existing Sampling Techniques</h2>

  <div class="container" style="grid-template-columns: 1fr 1fr;">
  <div>
  <h4 class="center fragment">SimPoint</h4>
  <div class="fragment" style="display:grid; align-content: center; justify-items:center; grid-template-columns:1fr 1fr;">
    <img style="display:grid;" src="./figs/multi-level-sim/simpoint-gzip_phases.gif" />
    <img style="display:grid;" src="./figs/multi-level-sim/simpoint-gcc_phases.gif" />
  </div>
  <ul class="small">
    <li class="fragment">Program execution traces aren’t random
      <ul class="fragment">
        <li>They execute the same code again-and-again</li>
        <li>Workload execution traces can be split into <strong style="text-decoration:underline;">phases</strong> that exhibit similar μArch behavior</li>
      </ul>
    </li>
    <li class="fragment">SimPoint-style representative sampling
      <ul class="fragment">
        <li>Compute an embedding for each program interval (e.g. blocks of 100M instructions)</li>
        <li>Cluster interval embeddings using k-means</li>
        <li>Choose representative intervals from each cluster as <em>sampling units</em></li>
      </ul>
    </li>
  </ul>
  </div>
  <div>
    <h4 class="center fragment">SMARTS</h4>
    <img class="fragment" src="./figs/quals/smarts.png" />
    <ul class="small">
      <li class="fragment">Rigorous statistical sampling enables computation of confidence bounds
        <ul class="fragment">
          <li>Use random sampling on a full execution trace to derive a population sample</li>
          <li>Central limit theorem provides confidence bounds</li>
        </ul>
      </li>
      <li class="fragment">SMARTS-style random sampling
        <ul class="fragment">
          <li>Pick a large number of samples to take before program execution</li>
          <li>If the sample variance is too high after simulation, then collect more sampling units</li>
          <li>Use CLT to derive a confidence bound for the aggregate performance metric</li>
        </ul>
      </li>
    </ul>
  </div>
  </div>
</section>

<section>
  <h2>Functional Warmup</h2>

  <p class="fragment center">The state from a sampling unit checkpoint is only <em>architectural</em> state. The <em>microarchitectural</em> state of the uArch simulator starts at the reset state!</p>

  <div class="fragment center">
    <img width="50%" src="./figs/multi-level-sim/sampled_simulation.png" />
  </div>

  <ul>
    <li class="fragment">We need to seed long-lived uArch state at the beginning of each sampling unit</li>
    <li class="fragment">This process is called <em>functional warmup</em></li>
  </ul>
</section>

<section>
  <h2>Importance of Functional Warmup</h2>

  <p class="center fragment">Long-lived microarchitectural state (caches, branch predictors, prefetchers, TLBs) has a substantial impact on the performance of a sampling unit</p>

  <div class="container" style="display: grid; grid-template-columns:1fr 1.4fr;">
    <figure class="fragment center" style="display: grid; align-content: center;">
      <img width="100%" src="./figs/multi-level-sim/livesim_amat_vs_warmup.png" />
      <figcaption class="small center">AMAT Error vs # of detailed warmup instructions <sup>[1]</sup></figcaption>
    </figure>

    <figure class="fragment center" style="display: grid; align-content: center;">
      <img width="100%" src="./figs/quals/warmup_mpki_plots.png" />
      <figcaption class="small center">MPKI vs warmup vs sampling unit length for different branch predictors<sup>[2]</sup></figcaption>
    </figure>
  </div>

  <div class="fragment">
  <hr>
  <div class="verysmall">
  <p class="footnote">
  [1]: Hassani, Sina, et al. "LiveSim: Going live with microarchitecture simulation." HPCA 2016.<br/>
  [2]: Eeckhout, L., 2008. Sampled processor simulation: A survey. Advances in Computers. Elsevier.
  <!--[2]: Barr, Kenneth C., et al. "Accelerating multiprocessor simulation with a memory timestamp record." ISPASS 2005.</p>-->
  </div>
  </div>
</section>

<section>
  <h2>Why RTL-Level Sampled Simulation?</h2>
  <div class="container" style="grid-template-columns: 1.4fr 1fr;">
    <div class="fragment">
      <img src="./figs/dynamic/tidalsim/why_rtl.svg" />
    </div>
    <div>
      <ul class="smallish">
        <li class="fragment">Eliminate modeling errors
          <ul>
            <li>Remaining errors can be handled via statistical techniques</li>
          </ul>
        </li>
        <li class="fragment">No need to correlate performance model and RTL
          <ul>
            <li>Let the RTL serve as the source of truth</li>
          </ul>
        </li>
        <li class="fragment">Can produce RTL-level collateral
          <ul>
            <li>Leverage for applications in verification and power modeling</li>
          </ul>
      </ul>
    </div>
  </div>

  <p class="center fragment">This RTL-first evaluation flow is enabled by highly parameterized RTL generators and SoC design frameworks (e.g. Chipyard).</p>
</section>

</section>

<section>
<section class="center">
  <h2>Implementation of TidalSim v0.1</h2>
</section>

<section style="text-align: center;">
  <h2>Overview of the TidalSim v0.1 Flow</h2>
  <img src="./figs/dynamic/tidalsim/overview.svg" />
</section>

<section>
  <h2>Implementation Details For TidalSim v0.1</h2>
  <div class="container" style="grid-template-columns: 1.2fr 1fr;">
  <div>
  <ul class="smallish">
    <li class="fragment">Basic block identification
      <ul><li>BB identification from spike commit log or from static ELF analysis</li></ul>
    </li>
    <li class="fragment">Basic block embedding of intervals</li>
    <li class="fragment">Clustering and checkpointing
      <ul>
        <li>k-means, PCA-based n-clusters</li>
        <li>spike-based checkpoints</li>
      </ul>
    </li>
    <li class="fragment">RTL simulation and performance metric extraction
      <ul><li>Custom force-based RTL state injection, out-of-band IPC measurement</li></ul>
    </li>
    <li class="fragment">Extrapolation
      <ul><li>Estimate IPC of each interval based on its embedding and distances to RTL-simulated intervals</li></ul>
    </li>
  </ul>
  </div>
  <div style="display:grid; align-content: center;">
    <img src="./figs/dynamic/tidalsim/overview.svg" />
  </div>
  </div>
</section>

</section>

<section>
<section class="center">
<h2>Results for IPC Trace Reconstruction</h2>
</section>

<section>
  <h2>IPC Trace Prediction: huffbench</h2>
  <ul>
    <li class="fragment">Huffman compression from Embench (huffbench)</li>
    <li class="fragment"><code>N=10000</code>, <code>C=18</code></li>
    <li class="fragment">Full RTL sim takes 15 minutes, TidalSim runs in 10 seconds</li>
    <li class="fragment">Large IPC variance</li>
  </ul>
  <img class="fragment" src="./figs/multi-level-sim/huffbench_results.svg" />
</section>

<section>
  <h2>IPC Trace Prediction: wikisort</h2>
  <ul>
    <li class="fragment">Merge sort benchmark from Embench (wikisort)</li>
    <li class="fragment"><code>N=10000</code>, <code>C=18</code></li>
    <li class="fragment">Full RTL sim takes 15 minutes, TidalSim runs in 10 seconds</li>
    <li class="fragment">Can capture general trends and time-domain IPC variation</li>
  </ul>
  <img class="fragment" src="./figs/multi-level-sim/wikisort_results.svg" />
</section>

<!-- Add box and whiskers IPC error plot -->
<section>
  <h2>Aggregate IPC Prediction for Embench Suite</h2>
  <div class="center">
    <img src="./figs/multi-level-sim/embench_ipc_error.svg" style="margin-bottom:0;" />
  </div>
  <p class="center fragment">Typical IPC error (<strong>without</strong> functional warmup and with fine time-domain precision of 10k instructions) <strong>is &lt; 5%</strong></p>
</section>

</section>

<section>
<section class="center">
  <h2>WIP: TidalSim v1</h2>
</section>

<section>
  <h2>From Tidalsim v0.1 to v1</h2>

  <!-- Things to do before calling the first prototype complete: -->

  <ul>
    <li class="fragment">Functional L1-only cache warmup</li>
    <li class="fragment">Functional branch predictor warmup</li>
    <li class="fragment">Use robust checkpointing fork of spike
      <ul>
        <li>Better arch state initialization technique <span class="small">(via program snippet + selective forces depending on bits that can't be set via ISA)</span></li>
      </ul>
    </li>
    <li class="fragment">Characterization on other baremetal workloads
      <ul>
        <li>dhrystone, coremark, riscv-tests benchmarks, MiBench</li>
      </ul>
    </li>
    <li class="fragment">Explore more sophisticated clustering and extrapolation techniques
      <ul>
        <li>Binary and PC-agnostic interval embeddings</li>
      </ul>
    </li>
  </ul>

  <p class="center fragment">Demonstrate we can hit <strong>&lt;1% IPC error</strong></p>
</section>

<section>
  <h2>Leveraging HDLs for TidalSim Methodology</h2>

  <ul>
    <li class="fragment">HW DSE with TidalSim requires an RTL injection harness</li>
    <!--Existing harness is hardcoded for one Chipyard SoC design point</li>-->
    <li class="fragment">Automatic harness generation using high-level HDLs
      <ul>
        <li class="fragment">Chisel API to <em>semantically mark</em> arch and uArch state</li>
        <li class="fragment">FIRRTL pass to generate a state-injecting test harness</li>
      </ul>
    </li>
  </ul>

  <pre class="fragment"><code class="language-scala" data-trim data-noescape data-line-numbers="|3">
class RegFile(n: Int, w: Int, zero: Boolean = false) {
  val rf = Mem(n, UInt(w.W))
  (0 until n).map { archStateAnnotation(rf(n), Riscv.I.GPR(n)) }
  // ...
}
  </code></pre>

  <pre class="fragment"><code class="language-scala" data-trim data-noescape data-line-numbers="|4-6|5">
class L1MetadataArray[T &lt;: L1Metadata] extends L1HellaCacheModule()(p) {
  // ...
  val tag_array = SyncReadMem(nSets, Vec(nWays, UInt(metabits.W)))
  (0 until nSets).zip((0 until nWays)).map { case (set, way) =&gt;
    uArchStateAnnotation(tag_array.read(set)(way), Uarch.L1.tag(set, way, cacheType=I))
  }
}
  </code></pre>
</section>

</section>

<section>
<section class="center">
  <h2>WIP: TidalSim for Coverpoint Synthesis</h2>
</section>

<section>
  <h2>TidalSim for Verification</h2>

  <div class="container" style="grid-template-columns: 1fr 1.4fr">
    <div class="fragment">
      <img width="100%" src="./figs/dynamic/tidalsim/uarch_iteration_flow_tidalsim_simple.svg" />
    </div>
    <div class="fragment">
      <img width="100%" src="./figs/dynamic/tidalsim/cp_synthesis1.svg" />
    </div>
  </div>

  <div class="center">

  <ul>
    <li class="fragment">Property synthesis techniques require waveforms for analysis
      <ul>
        <li><strong>Specification mining</strong> for invariant synthesis or RTL bug localization</li>
        <li><strong>Coverpoint synthesis</strong> for tuning stimulus generators towards bugs</li>
      </ul>
    </li>
  </ul>

  <p class="center fragment">TidalSim provides a way to extract many small, unique, RTL waveforms from large workloads with low latency</p>
</section>

<section>
  <h2>5.b: Past Work on Specification Mining</h2>

  <ul>
    <li class="fragment">Take waveforms from RTL simulation and attempt to mine unfalsified specifications involving 2+ RTL signals<sup>[1]</sup></li>
  </ul>

  <div class="center fragment">
    <img width="50%" src="./figs/quals/spec_mining_flow.svg" />
  </div>

  <ul>
    <li class="fragment">Specifications are constructed from LTL templates
      <ul>
        <li class="fragment"><strong>Until</strong>: $ \mathbf{G}\, (a \rightarrow \mathbf{X}\, (a\, \mathbf{U}\, b)) $</li>
        <li class="fragment"><strong>Next</strong>: $ \mathbf{G}\, (a \rightarrow \mathbf{X}\, b) $</li>
        <li class="fragment"><strong>Eventual</strong>: $ \mathbf{G}\, (a \rightarrow \mathbf{X F}\, b) $</li>
        <li class="fragment">$a$ and $b$ are atomic propositions constructed from signals in the RTL design</li>
      </ul>
    </li>
  </ul>

  <div>
  <hr>
  <div class="verysmall">
    <p class="footnote">
    [1]: Iyer, Vighnesh, et. al., 2019. RTL bug localization through LTL specification mining. MEMOCODE.
    </p>
  </div>
  </div>
</section>

<section>
  <h2 style="font-size:1.8rem;">5.b: Specification Mining Used for RTL Bug Localization</h2>

    <p class="fragment center small">Introduce a bug in the riscv-mini cache</p>

  <pre class="fragment"><code class="language-diff" data-trim data-noescape>
-  hit := v(idx_reg) && rmeta.tag === tag_reg
+  hit := v(idx_reg) && rmeta.tag =/= tag_reg
  </code></pre>

  <ul class="small">
    <li class="fragment">This bug does not affect most ISA tests but a multiply benchmark failed by hanging</li>
    <li class="fragment">Checking the VCD against the mined properties gives these violations</li>
  </ul>

  <table class="fragment" style="font-size: 1.2rem;">
    <thead><tr>
      <th>Template</th>
      <th>$\textbf{a}$</th>
      <th>$\textbf{b}$</th>
      <th>Violated at Time</th>
    </tr></thead>
    <tbody>
    <tr>
      <td>Until</td>
      <td><code>Tile.arb_io_dcache_r_ready</code></td>
      <td><code>Tile.dcache.hit</code></td>
      <td>418</td>
    </tr>
    <tr>
      <td>Until</td>
      <td><code>Tile.dcache_io_nasti_r_valid</code></td>
      <td><code>Tile.dcache.hit</code></td>
      <td>418<td>
    </tr>
    <tr>
      <td>Until</td>
      <td><code>Tile.dcache.is_alloc</code></td>
      <td><code>Tile.dcache.hit</code></td>
      <td>418</td>
    </tr>
    <tr>
      <td>Until</td>
      <td><code>Tile.arb.io_dcache_ar_ready</code></td>
      <td><code>Tile.arb_io_nasti_r_ready</code></td>
      <td>640</td>
    </tr>
    </tbody>
  </table>

  <p class="center fragment small">The violated properties point to an anomaly with the <code>hit</code> signal and localize the bug</p>
</section>

<section>
  <h2 style="font-size:1.8rem;">5.b: Coverpoint Synthesis as Complement of Spec Mining</h2>

  <div class="center fragment">
    <img width="60%" src="./figs/dynamic/tidalsim/cp_synthesis2.svg" />
  </div>

  <ul class="small">
    <li class="fragment">Coverpoint synthesis is an alternative take on spec mining where we synthesize μArch properties that we want to see more of
      <ul>
        <li>Instead of monitoring properties just for falsification, we also monitor them for <em>completion</em></li>
        <li>Properties that are <em>falsified</em> or <em>completed</em>, but not too often, are good candidates for coverpoints</li>
      </ul>
    </li>
    <li class="fragment">Evaluation
      <ul>
        <li class="fragment">Synthesize coverpoints on Rocket using waveforms from TidalSim and regular RTL sim with the same compute budget</li>
        <li class="fragment">Demonstrate we can synthesize more, and more interesting coverpoints using TidalSim data</li>
        <li class="fragment">Evaluate off-the-shelf RISC-V instgen on synthesized coverpoints vs structural coverage</li>
      </ul>
    </li>
  </ul>
</section>

</section>

<section>
  <h2>Conclusion</h2>

  <div class="container" style="grid-template-columns: 1fr 1.4fr;">
  <div style="position:relative; bottom:0%;">
  <ul class="smallish">
    <li class="fragment">Rapid and accurate microarchitectural evaluation is important</li>
    <li class="fragment">We propose <strong>TidalSim</strong>, a <em>simulation methodology</em> based on sampled RTL simulation</li>
    <li class="fragment">We demonstrate its utility in IPC trace reconstruction with under 5% error</li>
    <li class="fragment">We examine coverpoint synthesis as an application for RTL-level collateral</li>
  </ul>
  <p class="small center fragment"><a href="https://github.com/euphoric-hardware/tidalsim">TidalSim (github.com/euphoric-hardware/tidalsim)</a> <small>Forks of spike, chipyard, testchipip + top-level runner</small></p>
  </div>
  <div style="display:grid; align-content: center; position: relative; top: -12%;" class="fragment">
    <img width="80%" src="./figs/dynamic/tidalsim/overview.svg" />
    <img width="80%" src="./figs/dynamic/tidalsim/uarch_iteration_flow_tidalsim_simple.svg" />
    <figcaption class="small center"><strong>TidalSim</strong>: a fast, accurate, low latency, low cost <em>simulation methodology</em> that produces RTL-level collateral for performance and power estimation and verification on real workloads.</figcaption>
  </div>
  </div>

</section>


{% endblock %}
