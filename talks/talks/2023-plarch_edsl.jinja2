{% extends "base/base.jinja2" %}

{# HTML title #}
{% set webpage_title = "PLARCH 2023 - New Embedded DSLs for HW Design and Verification" %}
{# Short description #}
{% set description = "The value of implementing HDLs as eDSLs and three examples leveraging Chisel in Scala: chisel-recipes, simcommand, and a parametric stimulus generation API." %}
{# List of authors #}
{% set author = "Vighnesh Iyer, Kevin Laeufer, Young-Jin Park, Rohit Agarwal, Lixiang Yin, Bryan Ngo, Oliver Yu, Koushik Sen, Borivoje Nikolić" %}
{# Change ‘venue’ to a conference or workshop name if any #}
{% set venue = "PLARCH Workshop @ ISCA 2023" %}
{# Publication info (hidden by default) #}
{% set pub_datetime_iso = "2023-06-17" %}
{% set pub_date = "June 17, 2023" %}

{# Custom styles and JS for a particular talk #}
{% block custom_head %}
<style>
  h3 {
    text-transform: none !important;
  }
  .reveal pre {
    width: 100%;
  }
  .reveal pre code {
    padding: 20px !important;
  }
  .container{
    display: grid;
    grid-auto-flow: column;
    column-gap: 1em;
  }
</style>
{% endblock %}

{% block slides %}
<section>
  <h3>New Embedded DSLs for Hardware Design and Verification</h3>
  <p>
    <small><strong>Vighnesh Iyer</strong>, Kevin Laeufer, Young-Jin Park, Rohit Agarwal, Lixiang Yin, Bryan Ngo, Oliver Yu, Koushik Sen, Borivoje Nikolić</small>
  </p>
  <p>
    <small><strong>UC Berkeley</strong></small>
  </p>
  <p>
    <small><strong>PLARCH 2023</strong></small>
  </p>
</section>

<section>
  <section>
    <h3>HDL Implementation Techniques</h3>
    <ul>
      <li class="fragment">Freestanding DSLs</li>
      <span class="fragment">
      <li>Custom compilers for existing languages</li>
      <ul>
        <li>"Reflection-based" AST analysis</li>
      </ul>
      </span>
      <li class="fragment">Embedded DSLs (eDSLs)</li>
    </ul>
  </section>

  <section>
    <h3>Freestanding DSLs</h3>
    <ul>
      <li class="fragment">A custom language specialized for hardware design</li>
      <li class="fragment"><strong>Examples</strong>: Verilog/VHDL, <a href="https://github.com/masc-ucsc/pyrope_artifacts">pyrope</a>, Bluespec Verilog, <a href="https://github.com/dalance/veryl">Veryl</a></li>
    </ul>
  </section>

  <section>
    <h3>Freestanding DSLs</h3>
    <ul>
      <li class="fragment">Full control over syntax and compiler</li>
    </ul>

<pre class="fragment"><code class="language-verilog small" data-trim data-noescape>
 typedef union tagged {
      bit  [4:0] Register;
      bit [21:0] Literal;
      struct {
          bit  [4:0] regAddr;
          bit  [4:0] regIndex;
      } Indexed;
 } InstrOperand;

case (orand: InstrOperand) matches
    tagged Register r : x = rf[r];
    tagged Literal n : x = n;
    tagged Indexed { ra, ri } : x = mem[rf[ra]+ri];
endcase
</pre></code>
<p class="center fragment">Ergonomic runtime tagged unions in Bluespec Verilog</p>
  </section>

  <section>
    <h3>Freestanding DSLs</h3>
<pre><code class="language-verilog small" data-trim data-noescape>
class Packet;
    rand bit [3:0] data [];

    constraint size { data.size() &gt; 5; data.size() &lt; 10; }

    constraint values {
        foreach(data[i]) {
            data[i] == i + 1;
            data[i] inside {[0:8]};
        }
    }
endclass
</pre></code>
    <p class="center fragment">Ergonomic declarative constrained random API in SystemVerilog</p>
  </section>

  <section>
    <h3>Freestanding DSLs</h3>
    <ul>
      <span class="fragment">
      <li>Eventually, the need for general-purpose programming constructs becomes apparent</li>
      <small><ul class="fragment">
        <li>Functions, data structures, iteration, type system, FFI, stdlib</li>
      </ul></small>
      </span>
      <!--<li class="fragment">Tooling can never compete with a general-purpose language with more investment</li>-->
    </ul>
    <p class="fragment"><strong>2 directions:</strong></p>
    <ul>
      <li class="fragment">Build a metaprogramming layer (e.g. Perl for Verilog)</li>
      <li class="fragment">Augment the DSL with more features (e.g. SystemVerilog)</li>
    </ul>
  </section>

  <section>
    <h3>Custom Compilers</h3>

    <ul>
      <li class="fragment">Take an existing language and its frontend, and design a custom backend</li>
      <li class="fragment"><strong>Examples:</strong> Clash, SystemC HLS, MyHDL*</li>
      <li class="fragment"><strong>Advantages:</strong> Language reuse, direct simulation</li>
      <li class="fragment"><strong>Disadvantages:</strong> Implementation burden, limited to a subset of the language, fine hardware control may be difficult</li>
    </ul>
  </section>
</section>

<section>
<!-- make the complete case for eDSLs over the other approaches -->
<!-- they enable easy construction of new DSLs, which are crucial to *augment* existing HDLs -->
<!-- this is why HDLs should be written as eDSLs! -->
<!-- show the eDSL diagram -->
  <section>
    <h3>Embedded DSLs (eDSLs)</h3>
    <ul>
      <li class="fragment">Embed hardware primitives and operators in a general-purpose language</li>
      <li class="fragment"><strong>Examples:</strong> Lava, Chisel, PyMTL3, Amaranth</li>
      <li class="fragment">Leverage existing libraries, build tools, IDEs, testing frameworks, language features</li>
      <li class="fragment"><strong>Disadvantages:</strong> syntax limitations, arbitrary code generators, preserving semantics is hard</li>
    </ul>
  </section>

  <section>
    <h3>eDSL Construction</h3>
    <img src="figs/simcommand/functional_apis.svg" />
    <ul>
      <li class="fragment">eDSLs provide ADTs and APIs</li>
      <li class="fragment">A regular program written in the host language is run to construct a <em>description</em></li>
      <li class="fragment">An <em>interpreter</em> turns the description into some final output</li>
    </ul>
    <p class="fragment center"><small>For HDLs, the eDSL primitives are hardware components, and the interpreter turns a netlist description into FIRRTL, CIRCT IR, etc.</small></p>
  </section>

  <section>
    <h3>Why eDSLs?</h3>
    <p class="center fragment">HDLs implemented as eDSLs open the door for more eDSLs targeting other aspects of hardware design and verification</p>
    <p class="center fragment">We should expand the horizons of eDSLs beyond RTL design into other complementary domains</p>
    <p class="center fragment">We present three eDSLs that augment and use Chisel</p>
  </section>
</section>

<section>
  <section>
    <h3>SimCommand: an eDSL for High-Performance Testbenches in Scala</h3>
  </section>

  <section>
    <h3>Testbench APIs in General Purpose Languages</h3>
    <ul class="fragment">
      <li>Scala: chiseltest</li>
      <li>Python: cocotb</li>
    </ul>

    <p class="fragment">Both provide all the benefits of being in a general-purpose language, <em>while having fork/join primitives</em></p>
    <p class="fragment">However, their fork/join functionality <strong>is slow</strong></p>
    <p class="fragment">We shouldn't have to compromise on performance</p>
  </section>

  <section>
    <h3>SimCommand</h3>
    <ul>
      <li class="fragment">Testbench API embedded in Scala</li>
      <li class="fragment">Uses chiseltest as the simulator interface</li>
      <li class="fragment">Purely functional: testbench description and interpretation are split</li>
    </ul>

    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
def enqueue(data: T): Command[Unit] = for {
    _ &lt;- poke(io.bits, data)
    _ &lt;- poke(io.valid, true.B)
    _ &lt;- waitUntil(io.ready, true.B)
    _ &lt;- step(1)
    _ &lt;- poke(io.valid, false.B)
} yield ()
    </pre></code>
  </section>

  <section>
    <h3>Fork/Join</h3>
    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
val pushNPop: Command[Boolean] = for {
    enqThread &lt;- fork(enqueue(100.U))
    deqThread &lt;- fork(dequeue())
    _         &lt;- join(enqThread)
    data      &lt;- join(deqThread)
} yield data.litValue == 100</pre></code>

    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
test(new Queue(UInt(8.W), 4)) { c =>
    val allGood = run(pushNPop, c.clock)
    assert(allGood)
}</pre></code>
  </section>

  <section>
    <h3>Interpreter / Scheduler</h3>
    <div class="container" style="grid-template-columns: 1fr 1fr;">
      <div class="col" style="display: grid;">
        <img src="./figs/simcommand/scheduler_sans_serif.svg" style="align-self:center;" />
      </div>
      <div class="col">
        <ul>
          <li class="fragment">On each timestep
            <ul class="small">
              <li>Run every thread until a step, join, or return</li>
              <li>Collect any new threads spawned</li>
              <li>Repeat until a fixpoint is reached</li>
            </ul>
          </li>
          <li class="fragment">Step the clock</li>
          <li class="fragment">Repeat until the main thread returns</li>
        </ul>
      </div>
    </div>
  </section>

  <section>
    <h3>The SimCommand eDSL</h3>
    <ul>
      <li class="fragment">Core ADT type is a <code>Command[R]</code> which describes a testbench operation that terminates with a value of type <code>R</code></li>
      <li class="fragment">Leverage Chisel for RTL IO datatypes</li>
      <li class="fragment">Leverage Scala's for-comprehension syntax for monadic composition of <code>Command</code>s</li>
      <li class="fragment">10-20x faster than cocotb and chiseltest</li>
    </ul>
  </section>
</section>

<section>
  <section>
    <h3>An eDSL For Imperative and Declarative Parametric Stimulus Generation</h3>
  </section>

  <section>
    <h3>Hybrid Stimulus Generators</h3>

    <ul>
      <li class="fragment">Two types of generators</li>
      <ul>
        <li class="fragment">Imperative generators (QuickCheck's <code>Gen</code>)</li>
        <li class="fragment">Declarative constraint solvers (SystemVerilog constrained random)</li>
      </ul>
      <li class="fragment">We propose a hybrid API that:</li>
      <ul>
        <li class="fragment">Can mix both generator types</li>
        <li class="fragment">Leverages Chisel for hardware datatypes and as a constraint language</li>
      </ul>
    </ul>
  </section>

  <section>
    <h3>Imperative Generation eDSL API</h3>

    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
val intGen: Gen[Int] = Gen[Int].range(0, 100)
</pre></code>

    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
val seqGen: Gen[Seq[Int]] = for {
  lit &lt;- Gen.range(1, 100)
  tailGen &lt;- Gen.oneOf(Gen(Seq()) -&gt; 0.1, seqGen -&gt; 0.9),
  seqn &lt;- tailGen.map(t =&gt; lit +: t)
} yield seqn
</pre></code>

<p class="center fragment">Use Scala's for-comprehensions for monadic composition</p>
  </section>

  <section>
    <h3>Generating Chisel Datatypes</h3>

    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
val hwUIntGen: Gen[UInt] = Gen[UInt].range(0, 100)
</pre></code>

    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
object MemOp extends ChiselEnum
case class MemTx extends Bundle {
  val addr = UInt(32.W)
  val data = UInt(64.W)
  val op = MemOp
}
val memTxGen: Gen[MemTx] = Gen[MemTx].uniform
</pre></code>
  </section>

  <section>
    <h3>Leveraging Chisel for Constraints</h3>

    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
object MemOp extends ChiselEnum
case class MemTx extends Bundle {
  val addr = UInt(32.W)
  val data = UInt(64.W)
  val op = MemOp
}
val memTxGen: Gen[MemTx] = Gen[MemTx].constrained { memTx =&gt;
  (memTx.op === MemOp.Write) && (addr(2,0) === 0.U)
}
</pre></code>
    <p class="center fragment">Since Chisel is an eDSL, it can be leveraged for other hardware eDSLs</p>
  </section>

  <section>
    <h3>Parametric Fuzzing</h3>

    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
Gen[MemTx].generate(ScalaRandom(seed=10))
Gen[MemTx].generate(ParametricRandom(Seq[Byte](...)))
</pre></code>
    <p class="center fragment">Unify both imperative and declarative constraint generators and introduce parametric control</p>

    <img class="fragment" src="./figs/fuzzing/parametric_fuzzing_loop.svg" />
  </section>

  <section>
    <h3>The Stimulus Generation eDSL</h3>
    <ul>
      <li class="fragment">Core ADT type is a <code>Gen[A]</code> which describes a generator of values of type <code>A</code></li>
      <li class="fragment">Leverage Chisel for datatypes and as a constraint language</li>
      <li class="fragment">Leverage Scala's for-comprehension syntax for monadic composition of <code>Gen</code>s</li>
    </ul>
  </section>
</section>

<section>
  <section>
    <h3>Chisel-Recipes: A Cycle-Level Imperative Control Flow eDSL</h3>
  </section>

  <section>
    <h3>Writing Control Flow Logic</h3>
    <p class="center fragment">Often, hardware designers manually convert imperative control flow to an explicit FSM</p>
    <p class="center fragment">This process is repetitive, mechanical, and error-prone</p>
    <p class="center fragment">We can design an eDSL to directly express cycle-level control flow and an interpreter to turn it into RTL</p>
  </section>

  <section>
    <h3>Chisel-Recipes eDSL</h3>
    <ul>
      <li class="fragment"><code>tick()</code>: advance a cycle</li>
      <li class="fragment"><code>action { block }</code>: perform the assignments in the block now</li>
      <li class="fragment"><code>whileLoop (cond) { recipe }</code>: loop until cond is false</li>
      <li class="fragment"><code>when (cond) { recipe }</code>: if cond is true, execute sub-recipe</li>
    </ul>

    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
def waitUntil(c: Bool) = whileLoop(!c, tick())
def forever(r: Recipe) = whileLoop(true.B, r)
</pre></code>
  </section>

  <section>
    <h3>Example</h3>
    <p class="fragment center">Reading a memory from an AXI-Lite port</p>

    <pre class="fragment"><code class="language-scala small" data-trim data-noescape>
val readOnce = recipe(
  waitUntil(axi.ar_valid === 1.B, active=axi.ar_ready),
  action {
    axi.r_data := RegNext(mem.read(axi.ar_addr))
    axi.r_valid := 1.B
  },
  waitUntil(axi.r_ready === 1.B, active=axi.r_valid),
  tick()
).compile()
</pre></code>
  </section>

  <section>
    <h3>Leveraging Chisel and Scala for Debug</h3>
    <p class="center fragment">Use Scala macros to inject source line instrumentation into eDSL primitives</p>
    <p class="center fragment">Use Chisel printf and naming APIs to inject source info into RTL</p>
    <img class="fragment" src="./figs/recipes/waveform_debugging.png" />
  </section>

  <section>
    <h3>Implementation</h3>

    <img class="fragment" src="./figs/recipes/recipe_compilation.svg" />

    <p class="center fragment">Each primitive is a go-done circuit</p>
    <p class="center fragment">Opportunity to use a lightweight HLS IR (e.g. Calyx) to produce optimized FSMs</p>
  </section>

  <section>
    <h3>The Chisel-Recipes eDSL</h3>
    <ul>
      <li class="fragment">Core ADT type is a <code>Recipe</code> which describes a control flow machine</li>
      <li class="fragment">Leverage Chisel for RTL design and generation</li>
      <li class="fragment">Leverage Scala's implicits for source instrumentation and the eDSL's frontend API</li>
    </ul>
  </section>
</section>

<section>
<h3>Host Languages</h3>
<p class="center fragment">What makes a good host language for an eDSL?</p>
<ul>
  <li class="fragment">Algebraic data types</li>
  <li class="fragment">Flexible and extensible + familiar syntax</li>
  <li class="fragment">Monadic composition sugar <small>(or direct style alternatives)</small></li>
  <li class="fragment">Strong macro system for source transformation and instrumentation</li>
  <li class="fragment">Good IDE support, stdlib, library ecosystem</li>
</ul>
<p class="center fragment">Scala (3) is quite good!</p>
</section>

<!--
<section>
<h3>eDSL Overview</h3>
summarize the table from the paper
</section>
-->

<section>
<h3>Conclusion</h3>
  <ul>
    <li class="fragment">HDLs implemented as eDSLs provide an extensible foundation for other eDSLs</li>
    <li class="fragment">There are many areas of hardware design and verification that would be served well with specialized eDSLs</li>
  </ul>
  <p class="fragment center">What new eDSLs should we work on?</p>
<!-- restate the paper's final question -->
</section>
{% endblock %}
