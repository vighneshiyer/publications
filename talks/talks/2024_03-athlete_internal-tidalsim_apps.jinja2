{% extends "base/base.jinja2" %}

{# HTML title #}
{% set webpage_title = "ATHLETE Internal Meeting - TidalSim Overview and Applications" %}
{# Short description #}
{% set description = "A Unified Microarchitectural Simulation Framework to Identify and Leverage Unique Aspects of Workloads on Heterogeneous SoCs for Power and Performance Estimation and Verification" %}
{# List of authors #}
{% set author = "Vighnesh Iyer" %}
{# Change ‘venue’ to a conference or workshop name if any #}
{% set venue = "ATHLETE Internal (March 2024)" %}
{# Publication info (hidden by default) #}
{% set pub_datetime_iso = "2024-03-03" %}
{% set pub_date = "March 3, 2024" %}

{# Custom styles and JS for a particular talk #}
{% block custom_head %}
<style>
.reveal h2 {
  margin-top: 1rem !important;
}
.comparison_table {
  width: 100%;
  font-size: 60%;
  border-collapse: separate !important;
  thead > tr > th:first-child {
    border-right: 2px solid #222222;
  }
  tbody > tr > td:first-child {
    border-right: 2px solid #222222;
  }
}
</style>
{% endblock %}

{% block theme %}
import '/themes/remark-ish.scss'
import 'reveal.js/plugin/highlight/monokai.css'
{% endblock %}

{% set center = false %}

{% set rightarrow = "<strong>→</strong>" %}

{% block slides %}
<section class="center">
  <h1>TidalSim Overview and Applications</h1>
  <h3 style="font-weight: 500;">Vighnesh Iyer, Raghav Gupta, Dhruv Vaish, Charles Hong, Sophia Shao, Bora Nikolic</h3>
  <h3 style="font-weight: normal;">ATHLETE Internal Meeting</h3>
  <h4 style="font-weight: normal;">Monday, March 4rd, 2024</h4>
</section>

<section>
  <h2>Talk Outline</h2>
  <ol>
    <li>Overview of TidalSim</li>
    <li>Collateral produced by TidalSim and Applications</li>
  </ol>
</section>

<section>
  <section class="center">
    <h2>Overview of Tidalsim</h2>
  </section>

  <section>
    <h2>TidalSim Overview</h2>

    <div class="center">
      <img src="./figs/dynamic/tidalsim/uarch_iteration_flow_tidalsim_simple.svg" />
      <figcaption class="smallish center"><strong>TidalSim</strong>: a fast, accurate, low latency, low cost microarchitectural <em>simulation methodology</em> that produces RTL-level collateral for performance estimation and verification on real workloads.</figcaption>
    </div>
  </section>

  <section>
    <h2>TidalSim Components</h2>

    <div class="center fragment">
      <img src="./figs/dynamic/tidalsim/tidalsim_components_simple.svg" />
      <figcaption class="fragment small center">Overview of the components of TidalSim.</figcaption>
    </div>

    <p class="center fragment">TidalSim is <em>not</em> a new simulator. It is a <em>simulation methodology</em> that combines the strengths of architectural simulators, uArch models, and RTL simulators.</p>
  </section>

  <section>
    <h2>Sampled Simulation</h2>

    <p class="center fragment">Instead of running the entire program in uArch simulation, run the entire program in <em>functional simulation</em> and only run <em>samples</em> in uArch simulation</p>

    <div class="fragment center">
      <img width="60%" src="./figs/multi-level-sim/sampled_simulation0.png" />
    </div>

    <p class="fragment center">The full workload is represented by a selection of <em>sampling units</em>.</p>
  </section>

  <section>
    <h2>Why RTL-Level Sampled Simulation?</h2>
    <div class="container" style="grid-template-columns: 1.4fr 1fr;">
      <div class="fragment">
        <img src="./figs/dynamic/tidalsim/why_rtl.svg" />
      </div>
      <div>
        <ul class="smallish">
          <li class="fragment">Eliminate modeling errors
            <ul>
              <li>Remaining errors can be handled via statistical techniques</li>
            </ul>
          </li>
          <li class="fragment">No need to correlate performance model and RTL
            <ul>
              <li>Let the RTL serve as the source of truth</li>
            </ul>
          </li>
          <li class="fragment">Can produce RTL-level collateral
            <ul>
              <li>Leverage for applications in verification and power modeling</li>
            </ul>
        </ul>
      </div>
    </div>
  </section>

  <section style="text-align: center;">
    <h2>Overview of the TidalSim v0.1 Flow</h2>
    <img src="./figs/dynamic/tidalsim/overview.svg" />
  </section>

  <!--<section>
    <h2>IPC Trace Prediction: huffbench</h2>
    <ul>
      <li class="fragment">Huffman compression from Embench (huffbench)</li>
      <li class="fragment"><code>N=10000</code>, <code>C=18</code></li>
      <li class="fragment">Full RTL sim takes 15 minutes, TidalSim runs in 10 seconds</li>
      <li class="fragment">Large IPC variance</li>
    </ul>
    <img class="fragment" src="./figs/multi-level-sim/huffbench_results.svg" />
  </section>-->

  <section>
    <h2>IPC Trace Prediction: wikisort</h2>
    <ul>
      <li class="fragment">Merge sort benchmark from Embench (wikisort)</li>
      <li class="fragment"><code>N=10000</code>, <code>C=18</code></li>
      <li class="fragment">Full RTL sim takes 15 minutes, TidalSim runs in 10 seconds</li>
      <li class="fragment">Can capture general trends and time-domain IPC variation</li>
    </ul>
    <img class="fragment" src="./figs/multi-level-sim/wikisort_results.svg" />
  </section>

  <section>
    <h2>CoreMark Smoke Test</h2>
    <div class="center">
      <img width="100%" src="./figs/multi-level-sim/coremark_results.svg" />
    </div>

    <ul>
      <li><strong>NO</strong> functional warmup</li>
      <li>10k instruction intervals, 30 clusters, 2k detailed warmup</li>
      <li>Larger working set means functional warmup is crucial</li>
    </ul>
  </section>

  <section>
    <h2>Overall Functional Warmup Flow</h2>
    <div class="center">
      <img src="./figs/dynamic/tidalsim/full_flow_detail.svg" />
    </div>

    <ul class="small">
      <li class="fragment">uarch-agnostic cache checkpoints as memory timestamp record (MTR) checkpoints</li>
      <li class="fragment">Convert MTR checkpoints into concrete cache state with specific cache parameters DRAM contents</li>
      <li class="fragment">RTL simulation harness injects cache state into L1d tag+data arrays via 2d reg forcing</li>
    </ul>
  </section>

  <section>
    <h2>Memory Timestamp Record</h2>
    <div class="center">
      <img src="./figs/dynamic/tidalsim/mtr_flow.svg" />
    </div>

    <ul class="small">
      <li class="fragment">Construct MTR table from a memory trace, save MTR tables at checkpoint times</li>
      <li class="fragment">Given a cache with n sets, group block addresses by set index</li>
      <li class="fragment">Given a cache with k ways, pick the k most recently accessed addresses from each set</li>
      <li class="fragment">Knowing every resident cache line, fetch the data from the DRAM dump</li>
    </ul>
  </section>

  <section>
    <h2>wikisort with Functional Warmup</h2>

    <div class="center r-stack">
      <div class="fragment fade-in-then-out">
        <img src="./figs/multi-level-sim/wikisort_results.svg" />
        <figcaption>No functional warmup, there are significant IPC underpredictions</figcaption>
      </div>
      <div class="fragment fade-in">
        <img src="./figs/multi-level-sim/wikisort_results-l1d_warmup.svg" />
        <figcaption>L1d functional warmup, errors are substantially reduced</figcaption>
      </div>
    </div>

    <p class="center fragment"><strong>L1d functional warmup brings IPC error from 7% to 2%</strong></p>
  </section>
</section>

<section>
  <section class="center">
    <h2>Tidalsim Collateral and Applications</h2>
  </section>

  <section>
    <h2>Embedding Matrix</h2>

    <ul>
      <li class="fragment">Each interval of a program is represented with an embedding</li>
      <li class="fragment">Basic block vectors indicate which code paths were traversed in each interval</li>
      <li class="fragment">uArch-aware embeddings
        <ul>
          <li>Instruction mix: loads, stores, control, arith, integer, fp</li>
          <li>ILP: in varying window sizes (32, 64, ...)</li>
          <li>Register traffic: avg input operands, number of times a register is consumed, register dependency chains</li>
          <li>Working set: number of unique 32B/4K blocks touched in an interval</li>
          <li>Data stream strides: measure of spatial locality in temporally adjacent memory accesses</li>
          <li>Branch predictability: use an upper-limit branch prediction algorithm (Prediction by Partial Matching)</li>
        </ul>
      </li>
      <li class="fragment">Generally useful for analyzing time-varying program behavior</li>
    </ul>
  </section>

  <section>
    <h2>Sampled Simulation Inputs/Outputs</h2>

    <ul>
      <li class="fragment">Architectural and (partial) uArch states for every sampling interval that's simulated</li>
      <li class="fragment">Outputs from RTL simulation of each sampling interval</li>
    </ul>

    <pre class="fragment"><code class="language-text" data-trim data-noescape>
    checkpoints
      0x80000000.680000
        loadarch (all arch register state)
        mem.bin (all DRAM state)
        mtr (memory timestamp record - cache uArch agnostic)
        dcache_{data,tag}_array (reconstructed concrete L1 cache state)
        perf.csv (IPC, MPKI, cache miss performance metrics)
        dump.fsdb (full waveform dump)
      0x80000000.120000
        loadarch
        mem.bin
        mtr
        dcache_{data,tag}_array
        perf.csv
        dump.fsdb
    </code></pre>

    <ul>
      <li class="fragment">Each of these files is quite small</li>
      <li class="fragment">Can be used in several ways</li>
    </ul>
  </section>

  <section>
    <h2>Applications</h2>

    <ul>
      <li class="fragment">Power modeling
        <ul>
          <li class="fragment">Per-interval fsdb's can be used for proxy signal selection and macromodel training</li>
          <li class="fragment">Embedding matrix with Joules power simulation can be used to reconstruct full workload power trace</li>
          <li class="fragment">Explore power/perf pareto curves of different core microarchitectures</li>
        </ul>
      </li>
      <li class="fragment">Coverpoint synthesis
        <ul>
          <li class="fragment">Per-interval fsdb's can be used for specification mining / coverpoint synthesis</li>
          <li class="fragment">Synthesized coverpoints can be used for evaluation of instruction generators or as fuzzing targets for bughunting</li>
        </ul>
      </li>
      <li class="fragment">Event graph based uArch analysis
        <ul>
          <li>Once we can emit event graphs from RTL sim, we can also analyze those for anomalies and pinpointing differences between uArches</li>
        </ul>
      </li>
      <li class="fragment">Hardware parameter DSE
        <ul>
          <li class="fragment">Investigate the impact of changing a HW parameter on a large workload</li>
          <li class="fragment">Requires uArch-specific functional warmup + specialized injection harness for each design point</li>
        </ul>
      </li>
    </ul>
  </section>

  <section>
    <h2>More Applications</h2>

    <ul>
      <li>Benchmark extraction</li>
      <li>Application-level profiling</li>
      <li>Combining the above two intelligently
        <ul>
          <li>e.g. JS runtimes are an event loop that blindly might seem to benefit from high IPC. But improving that IPC has no impact on end-to-end application behavior!</li>
        </ul>
      </li>
    </ul>
  </section>

</section>

{% endblock %}
