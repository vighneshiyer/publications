{% extends "base/base.jinja2" %}

{# HTML title #}
{% set webpage_title = "Vighnesh Iyer's Qualifying Exam - TidalSim: Multi-Level Microarchitectural Simulation and Applications in Verification" %}
{# Short description #}
{% set description = "A Unified Microarchitectural Simulation Framework to Identify and Leverage Unique Aspects of Workloads on Heterogeneous SoCs for Power and Performance Estimation and Verification" %}
{# List of authors #}
{% set author = "Vighnesh Iyer" %}
{# Change ‘venue’ to a conference or workshop name if any #}
{% set venue = "UC Berkeley (Jan 2024)" %}
{# Publication info (hidden by default) #}
{% set pub_datetime_iso = "2023-12-29" %}
{% set pub_date = "December 29, 2023" %}

{# Custom styles and JS for a particular talk #}
{% block custom_head %}
<style>
.reveal h2 {
  margin-top: 2rem !important;
}
</style>
{% endblock %}

{% block theme %}
import '/themes/remark-ish.scss'
import 'reveal.js/plugin/highlight/monokai.css'
{% endblock %}

{% set center = false %}

{% block slides %}
<section class="center">
  <h1>TidalSim: A Unified Microarchitectural Simulation Framework</h1>
  <h2 style="font-weight:400;">To Identify and Leverage <strong>Unique Aspects of Workloads</strong> on <strong>Heterogeneous SoCs</strong> for Power and Performance Estimation and Verification</h2>
  <h3 style="font-weight: 500;">Vighnesh Iyer</h3>
  <h3 style="font-weight: normal;">Qualifying Exam Presentation</h3>
  <h4 style="font-weight: normal;">Wednesday, January 17th, 2024</h4>
</section>

<section>
  <h2>Talk Outline</h2>
  <ol>
    <li class="fragment"><strong>Why</strong>: What is the problem I'm solving?</li>
    <li class="fragment"><strong>What</strong>: What is the technique I'm proposing?</li>
    <li class="fragment"><strong>Prior work</strong> + <strong>what's new</strong> about my proposal?</li>
    <li class="fragment"><strong>How (pt 1)</strong>: A prototype implementation of my proposal</li>
    <li class="fragment"><strong>How (pt 2)</strong>: Addressing faults of and generalizing the prototype
      <ul style="font-size: 1.4rem;">
        <li>Each improvement over the prototype </li>
      </ul>
    </li>
    <li class="fragment"><strong>Case studies</strong> / <strong>applications</strong>: How will we use what we built to do something that was impossible before?</li>
    <li class="fragment"><strong>Thesis outline</strong> and paper plan</li>
  </ol>
</section>

<section>
{% include "talks/quals/why.jinja2" %}
</section>

<section>
{% include "talks/quals/what.jinja2" %}
</section>

<!--
  - Program intervals
  - Basic block embedding (show example)
  - Clustering (show example of clusters we extracted, 2D SVD projection and cluster coloring)
  - Checkpointing and snapshot taking
  - Injection into RTL-level simulation
  - Performance metric extraction
  - Extrapolation
-->
<section>
  <section class="center">
    <h2>Details of TidalSim Flow</h2>
  </section>

  <section>
    <h2>Basic Block Identification</h2>

    <p class="center fragment">Basic blocks are extracted from the dynamic commit log emitted by spike</p>

    <pre class="fragment"><code data-trim data-noescape>
core   0: >>>>  memchr
core   0: 0x00000000800012f6 (0x0ff5f593) andi    a1, a1, 255
core   0: 0x00000000800012fa (0x0000962a) c.add   a2, a0
core   0: 0x00000000800012fc (0x00c51463) bne     a0, a2, pc + 8
core   0: 0x0000000080001304 (0x00054783) lbu     a5, 0(a0)
core   0: 0x0000000080001308 (0xfeb78de3) beq     a5, a1, pc - 6
    </code></pre>

    <ul>
      <li class="fragment">Control flow instructions mark the end of a basic block</li>
      <li class="fragment">Previously identified basic blocks can be split if a new entry point is found</li>
      <li class="fragment"><code>0: 0x8000_12f6 ⮕ 0x8000_12fc</code></li>
      <li class="fragment"><code>1: 0x8000_1304 ⮕ 0x8000_1308</code></li>
    </ul>
  </section>

  <section>
    <h2>Program Intervals</h2>

    <p class="center fragment">A execution trace is captured from ISA-level simulation</p>
    <pre class="fragment"><code data-trim data-noescape>
core   0: >>>>  memchr
core   0: 0x00000000800012f6 (0x0ff5f593) andi    a1, a1, 255
core   0: 0x00000000800012fa (0x0000962a) c.add   a2, a0
core   0: 0x00000000800012fc (0x00c51463) bne     a0, a2, pc + 8
core   0: 0x0000000080001304 (0x00054783) lbu     a5, 0(a0)
core   0: 0x0000000080001308 (0xfeb78de3) beq     a5, a1, pc - 6
core   0: 0x000000008000130c (0x00000505) c.addi  a0, 1
core   0: 0x000000008000130e (0x0000b7fd) c.j     pc - 18
core   0: 0x00000000800012fc (0x00c51463) bne     a0, a2, pc + 8
    </code></pre>
    <p class="center fragment">The trace is grouped into intervals of N instructions</p>
    <p class="center fragment">Typical N for SimPoint samples is 1M</p>
    <p class="center fragment">Typical N for SMARTs samples is 10-100k</p>
  </section>

  <section>
    <h2>Interval Embedding and Clustering</h2>

    <p class="center fragment">Embed each interval with the frequency it traversed every identified basic block</p>

    <table style="width: 100%; font-size:90%;" class="fragment">
      <thead><tr>
        <th>Interval index</th>
        <th>Interval length</th>
        <th>Embedding</th>
      </tr></thead>
      <tbody><tr>
        <td>n</td>
        <td>100</td>
        <td><code>[40, 50, 0, 10]</code></td>
      </tr>
      <tr>
        <td>n+1</td>
        <td>100</td>
        <td><code>[0, 50, 10, 40]</code></td>
      </tr>
      <tr>
        <td>n+2</td>
        <td>100</td>
        <td><code>[0, 20, 20, 80]</code></td>
      </tr>
      </tbody>
    </table>

    <p class="center fragment">Intervals are clustered using k-means clustering on their embeddings</p>
  </section>

  <section>
    <h2>Arch Snapshotting</h2>

    <p class="center fragment">For each cluster, take the sample that is closest to its centroid</p>
    <p class="center fragment">Capture arch checkpoints at the start each chosen sample</p>

    <pre class="fragment"><code data-trim data-noescape>
pc = 0x0000000080000332
priv = M
fcsr = 0x0000000000000000
mtvec = 0x8000000a00006000
...
x1 = 0x000000008000024a
x2 = 0x0000000080028fa0
...
    </code></pre>

    <p class="center fragment">An arch checkpoints = arch state + raw memory contents</p>
  </section>

  <section>
    <h2>RTL Simulation and Arch-State Injection</h2>

    <ul>
      <li class="fragment">Arch checkpoints are run in parallel in RTL simulation for N instructions</li>
      <li class="fragment">RTL state injection caveats
        <ul>
          <li class="fragment">Not all arch state maps 1:1 with an RTL-level register</li>
          <li class="fragment">e.g. <code>fflags</code> in <code>fcsr</code> are FP exception bits from FPU μArch state</li>
          <li class="fragment">e.g. <code>FPRs</code> in Rocket are stored in recoded 65-bit format (not IEEE floats)</li>
        </ul>
      </li>
      <li class="fragment">Performance metrics extracted from RTL simulation</li>
    </ul>

    <pre class="fragment"><code data-trim data-noescape>
cycles,instret
1219,100
125,100
126,100
123,100
114,100
250,100
113,100
    </code></pre>
  </section>

  <section>
    <h2>Extrapolation</h2>
    <p class="center fragment">Performance metrics for one sample in a cluster are representative of all samples in that cluster</p>
    <p class="center fragment">Extrapolate on the entire execution trace to get a full IPC trace</p>
  </section>
</section>

<section>
  <section class="center">
    <h2>Early Results</h2>
  </section>

  <section>
    <h2>Clustering on Embench Benchmarks</h2>
    <img class="fragment" src="./figs/multi-level-sim/aha-mont64_clustering.svg" />
    <ul>
      <li class="fragment">Cluster centroids indicate which basic blocks are traversed most frequently in each cluster</li>
      <li class="fragment">We observe that most clusters capture unique traversal patterns</li>
    </ul>
  </section>

  <section>
    <h2>IPC Trace Prediction</h2>
    <ul>
      <li class="fragment">Montgomery multiplication from Embench (aha-mont64)</li>
      <li class="fragment"><code>N=1000</code>, <code>C=12</code></li>
      <li class="fragment">Full RTL sim takes 10 minutes, TidalSim runs in 10 seconds</li>
      <li class="fragment">IPC is correlated (mean error &lt;5%) and mild correlation between distance and error</li>
    </ul>
    <img class="fragment" src="./figs/multi-level-sim/aha-mont64_results.svg" />
  </section>
</section>

<section>
  <section class="center">
    <h2>Work in Progress</h2>
  </section>

  <section>
    <h2>Functional Cache Warmup</h2>
    <div class="container">
    <div>
      <ul>
        <li class="fragment" data-fragment-index="1">Each checkpoint is run in RTL simulation with a cold cache → inaccurate IPC due to incomplete cache warming during detailed warmup</li>
        <li class="fragment" data-fragment-index="3"><em>WIP</em>: "Memory Timestamp Record"<sup>[2]</sup> based cache model and RTL cache state injection</li>
      </ul>
    </div>
    <div class="fragment" data-fragment-index="2">
      <img width="100%" src="./figs/multi-level-sim/livesim_amat_vs_warmup.png" />
      <figcaption class="small center">AMAT Error vs # of Functional Warmup Instructions (from LiveSim<sup>[1]</sup>)</figcaption>
    </div>
    </div>

    <div class="fragment" data-fragment-index="4">
    <hr>
    <div class="verysmall">
    <p class="footnote">
    [1]: Hassani, Sina, et al. "LiveSim: Going live with microarchitecture simulation." HPCA 2016.<br/>
    [2]: Barr, Kenneth C., et al. "Accelerating multiprocessor simulation with a memory timestamp record." ISPASS 2005.</p>
    </div>
    </div>
  </section>

  <section>
    <h2>Performance Optimizations</h2>
    <ul>
      <li class="fragment">Currently two runs of the binary through spike are needed
      <ul>
        <li>One to get a commit log for basic block extraction, embedding, and clustering</li>
        <li>One more to dump arch checkpoints for chosen samples</li>
      </ul>
      </li>
      <li class="fragment">We can take regular checkpoints during the first execution to make arch checkpoint collection fast</li>
    </ul>
  </section>

  <section>
    <h2>Validation of State Injection</h2>
    <ul>
      <li class="fragment">There is no arch state comparison at the end of a checkpoint run in RTL simulation</li>
      <li class="fragment">We will standardize a arch state schema and dump a reference state from spike to check against</li>
    </ul>
  </section>

  <section>
    <h2>Handling Large Interval Lengths</h2>
    <ul>
      <li class="fragment">Real programs will use large intervals (1-10M instructions)</li>
      <li class="fragment">Selected intervals can't be run in their entirety in RTL simulation</li>
      <li class="fragment">Sub-sampling intervals with random sampling is required</li>
    </ul>
  </section>
</section>

<section>
  <section class="center">
    <h2>Applications</h2>
  </section>

  <section>
    <h2>Performance and Power Evaluation</h2>
    <ul>
      <li class="fragment">Fast, low-latency evaluation of HW parameters on long running workloads
      <ul>
        <li>Cache sizing between L1d vs L1i</li>
        <li>Balancing of 2-level cache hierarchies</li>
        <li>Unified vs separate i/d L2 caches</li>
      </ul>
      </li>
      <li class="fragment">Trace extraction for power model construction
      <ul>
        <li>Currently power macromodels are built + trained only on workloads that can run in RTL simulation</li>
        <li>TidalSim enables extraction of unique, short traces from full workloads</li>
        <li>Potential to improve signal selection and uncover holes in training datasets</li>
      </ul>
      </li>
    </ul>
  </section>

  <section>
    <h2>Issues with HW Fuzzer Evaluations</h2>
    <ul>
      <li class="fragment"><em>Last time</em>: discussed deficiencies in existing HW fuzzing evaluations due to bad success/feedback metrics
      <ul>
        <li class="fragment">Structural coverage is too easy to hit</li>
        <li class="fragment">Time to rediscover old bugs is too biased and forces us to use old RTL</li>
      </ul>
      </li>
      <li class="fragment">Bad metrics ⮕ dubious conclusions
      <ul>
        <li>We should save &gt;50% of mutated stimuli (vs &lt;1% for SW fuzzers)</li>
        <li>RTL-level feedback is useless for hitting bugs or improving coverage (vs SW fuzzers making no progress without feedback)</li>
      </ul>
      </li>
    </ul>
    <p class="center fragment">Can we synthesize metrics that lead to reasonable HW fuzzer evaluations?</p>
  </section>

  <section>
    <h2>Coverpoint Synthesis</h2>
    <ul>
      <li class="fragment"><em>Specification mining</em> takes waveforms of an RTL design and synthesizes properties involving 2+ signals that are unfalsified on all traces</li>
      <li class="fragment">Coverpoint synthesis is an alternative take on spec mining where we synthesize μArch properties that we want to see more of</li>
      <li class="fragment">This technique is far more effective if we have <em>many unique, realistic traces</em>
        <ul>
          <li class="fragment">Leverage interval clustering and sampled RTL simulation</li>
        </ul>
      </li>
    </ul>
  </section>

  <section>
    <h2>Bootstrapping Fuzzing</h2>
    <ul>
      <li class="fragment">Most HW fuzzers start from reset and run a binary on the SoC to hit some objective</li>
      <li class="fragment">Interesting objectives are harder to hit from reset vs from the middle of a workload
      <ul><li>e.g. post-OS boot, in the middle of an application</li></ul>
      </li>
      <li class="fragment">Arch and μArch checkpoints from TidalSim guarantee reachability and provides starting points for HW fuzzers</li>
    </ul>
  </section>
</section>

<section>
  <h2>Conclusion</h2>

  <div class="container" style="grid-template-columns: 1fr 1.4fr;">
  <div>
  <ul>
    <li class="fragment">We want rapid iteration wrt PPA evaluation and verification objectives</li>
    <li class="fragment">We need fast RTL-level simulation with trace extraction</li>
    <li class="fragment">We propose <strong>TidalSim</strong>, a multi-level simulation methodology to enable rapid HW iteration</li>
  </ul>
  </div>
  <div style="display:grid; align-content: center;">
    <img src="./figs/dynamic/tidalsim/overview.svg" />
  </div>
  </div>

  <p class="center fragment"><a href="https://github.com/euphoric-hardware/tidalsim">TidalSim (github.com/euphoric-hardware/tidalsim)</a></p>
</section>

{% endblock %}
