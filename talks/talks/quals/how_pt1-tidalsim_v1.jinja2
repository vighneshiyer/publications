<section class="center">
  <h2>4. How (pt 1): TidalSim v0.1 (A Prototype Implementation)</h2>

  <ul>
    <li>Implementation details of the TidalSim v0.1 prototype</li>
    <li>Cache functional warmup model</li>
    <li>Results for IPC trace reconstruction</li>
    <li>Going from TidalSim v0.1 to v1</li>
  </ul>
</section>

<!--
  - Program intervals
  - Basic block embedding (show example)
  - Clustering (show example of clusters we extracted, 2D SVD projection and cluster coloring)
  - Checkpointing and snapshot taking
  - Injection into RTL-level simulation
  - Performance metric extraction
  - Extrapolation
-->

<section style="text-align: center;">
  <h2>Overview of TidalSim Flow</h2>
  <img src="./figs/dynamic/tidalsim/overview.svg" />
</section>

<section>
  <h2>Basic Block Identification</h2>

  <p class="center fragment">Basic blocks are extracted from the dynamic commit trace emitted by spike</p>

  <pre class="fragment"><code data-trim data-noescape>
core   0: >>>>  memchr
core   0: 0x00000000800012f6 (0x0ff5f593) andi    a1, a1, 255
core   0: 0x00000000800012fa (0x0000962a) c.add   a2, a0
core   0: 0x00000000800012fc (0x00c51463) bne     a0, a2, pc + 8
core   0: 0x0000000080001304 (0x00054783) lbu     a5, 0(a0)
core   0: 0x0000000080001308 (0xfeb78de3) beq     a5, a1, pc - 6
  </code></pre>

  <ul>
    <li class="fragment">Control flow instructions mark the end of a basic block</li>
    <li class="fragment">Previously identified basic blocks can be split if a new entry point is found</li>
    <li class="fragment"><code>0: 0x8000_12f6 ⮕ 0x8000_12fc</code></li>
    <li class="fragment"><code>1: 0x8000_1304 ⮕ 0x8000_1308</code></li>
  </ul>
</section>

<section>
  <h2>Program Intervals</h2>

  <p class="center fragment">A commit trace is captured from ISA-level simulation</p>
  <pre class="fragment text"><code data-trim data-noescape>
core   0: >>>>  memchr
---
core   0: 0x00000000800012f6 (0x0ff5f593) andi    a1, a1, 255
core   0: 0x00000000800012fa (0x0000962a) c.add   a2, a0
core   0: 0x00000000800012fc (0x00c51463) bne     a0, a2, pc + 8
---
core   0: 0x0000000080001304 (0x00054783) lbu     a5, 0(a0)
core   0: 0x0000000080001308 (0xfeb78de3) beq     a5, a1, pc - 6
core   0: 0x000000008000130c (0x00000505) c.addi  a0, 1
---
  </code></pre>
  <p class="center fragment">The trace is grouped into intervals of $ N $ instructions of which we will choose $ C $ intervals as simulation units</p>
  <p class="center fragment">Typical $C = 10000$</p>
</section>

<section>
  <h2>Interval Embedding and Clustering</h2>

  <p class="center fragment">Each interval is embedded with a vector indicating how often each basic block was ran</p>

  <table style="width: 100%;" class="fragment small">
    <thead><tr>
      <th>Interval index</th>
      <th>Interval length</th>
      <th>Embedding</th>
    </tr></thead>
    <tbody><tr>
      <td>$ n $</td>
      <td>$ 100 $</td>
      <td>$ \begin{bmatrix}40 & 50 & 0 & 10\end{bmatrix} $</td>
    </tr>
    <tr>
      <td>$ n+1 $</td>
      <td>$ 100 $</td>
      <td>$ \begin{bmatrix}0 & 50 & 10 & 40\end{bmatrix}$</td>
    </tr>
    <tr>
      <td>$ n+2 $</td>
      <td>$ 100 $</td>
      <td>$ \begin{bmatrix}0 & 20 & 20 & 80\end{bmatrix}$</td>
    </tr>
    </tbody>
  </table>

  <ul class="small">
    <li class="fragment">Intervals are clustered using k-means clustering (typical $K = 10-30$)</li>
  </ul>
  <img class="fragment" style="margin-bottom:0;" src="./figs/multi-level-sim/aha-mont64_clustering.svg" />
  <ul class="small">
    <li class="fragment">Centroids indicate which basic blocks are traversed most frequently in each cluster</li>
    <li class="fragment">We observe that most clusters capture unique traversal patterns</li>
  </ul>
</section>

<section>
  <h2>Arch Snapshotting</h2>

  <p class="center fragment">For each cluster, take the sample that is closest to its centroid</p>
  <p class="center fragment">Capture arch checkpoints at the start of each chosen sample</p>

  <pre class="fragment"><code data-trim data-noescape>
pc = 0x0000000080000332
priv = M
fcsr = 0x0000000000000000
mtvec = 0x8000000a00006000
...
x1 = 0x000000008000024a
x2 = 0x0000000080028fa0
...
  </code></pre>

  <p class="center fragment">Arch checkpoint = arch state + raw memory contents</p>
</section>

<section>
  <h2>RTL Simulation and Arch-State Injection</h2>

  <ul>
    <li class="fragment">Arch checkpoints are run in parallel in RTL simulation for $ N $ instructions</li>
    <li class="fragment">RTL state injection caveats
      <ul>
        <li class="fragment">Not all arch state maps 1:1 with an RTL-level register</li>
        <li class="fragment">e.g. <code>fflags</code> in <code>fcsr</code> are FP exception bits from FPU μArch state</li>
        <li class="fragment">e.g. <code>FPRs</code> in Rocket are stored in recoded 65-bit format (not IEEE floats)</li>
      </ul>
    </li>
    <li class="fragment">Performance metrics extracted from RTL simulation</li>
  </ul>

  <pre class="fragment"><code data-trim data-noescape>
cycles,instret
1219,100
125,100
126,100
123,100
114,100
250,100
113,100
  </code></pre>
</section>

<section>
  <h2>Challenges with RTL-Level Sampled Simulation</h2>
  <!-- Describe the challenges, but leave the solutions for subsequent sections -->
  <!-- State injection, interval subsampling, functional warmup, performance metric extraction, supporting different microarchitectures and HW parameter spaces -->

  <ul>
    <li class="fragment">As workload traces grow to billions of dynamic instructions, $N$ will have to go up too, to avoid too many clusters
      <ul>
        <li class="fragment">{{ rightarrow }} we need to perform sampling unit subsampling using SMARTS-like methodology to tolerate the low throughput of RTL simulation</li>
      </ul>
    </li>
    <li class="fragment">Functional warmup can provide us with microarchitectural state at the start of each sampling unit, but injecting that state in RTL simulation is error-prone
      <ul>
        <li class="fragment">Correlating microarchitectural cache state via RTL hierarchical paths is tricky and requires manual effort</li>
      </ul>
    </li>
    <li class="fragment">If the hardware parameterization changes (cache hierarchy/sizing, choice of branch predictor)
      <ul>
        <li class="fragment">{{ rightarrow }} the functional warmup models and state injection logic must also change</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 style="font-size: 1.8rem;">Functional Cache Warmup with Memory Timestamp Record</h2>

  <p class="smallish center fragment">Memory Timestamp Record (MTR)<sup>[1]</sup> is a cache warmup model that can be constructed once and reused for many different cache parameterizations</p>

  <div class="r-stack center smallish">
    <div class="fragment fade-in-then-out" style="display: grid; place-items: center;">
      <img width="80%" src="./figs/dynamic/tidalsim/mtr_entry_update.svg"/>
      <figcaption>Updating entries in the (MTR) data structure from an memory access trace</figcaption>
    </div>

    <div class="fragment fade-in" style="display: grid; place-items: center;">
      <img width="60%" src="./figs/dynamic/tidalsim/mtr_reconstruction.svg"/>
      <figcaption>Reconstructing a cache state from a MTR checkpoint for a specific cache parameterization</figcaption>
    </div>
  </div>

  <div class="fragment">
    <hr>
    <div class="verysmall">
    <p class="footnote">
    [1]: Barr, Kenneth C., et al. "Accelerating multiprocessor simulation with a memory timestamp record." ISPASS 2005.</p>
    </div>
  </div>
</section>

<section>
  <h2>Extrapolation</h2>
  <ul>
    <li class="fragment">We gather performance metrics for one sampling unit in each cluster that is taken to be representative of that cluster ($\vec{p}$)</li>
    <li class="fragment">To compute the estimated performance of a given interval
      <ul>
        <li class="fragment">Compute the distances $\vec{d}$ of that interval's embedding to each cluster centroid</li>
        <li class="fragment">Compute a weighted mean using $\vec{d}$ and $\vec{p}$</li>
      </ul>
    <li class="fragment">Compute the estimated performance of all intervals to extrapolate to a full performance trace</li>
  </ul>
</section>

<section>
  <h2>IPC Trace Prediction: aha-mont64</h2>
  <ul>
    <li class="fragment">Montgomery multiplication from Embench (aha-mont64)</li>
    <li class="fragment"><code>N=1000</code>, <code>C=12</code></li>
    <li class="fragment">Full RTL sim takes 10 minutes, TidalSim runs in 10 seconds</li>
    <li class="fragment">IPC is correlated (mean error &lt;5%)<!--; very weak correlation between distance and error--></li>
  </ul>
  <img class="fragment" src="./figs/multi-level-sim/aha-mont64_results.svg" />
</section>

<section>
  <h2>IPC Trace Prediction: huffbench</h2>
  <ul>
    <li class="fragment">Huffman compression from Embench (huffbench)</li>
    <li class="fragment"><code>N=10000</code>, <code>C=18</code></li>
    <li class="fragment">Full RTL sim takes 15 minutes, TidalSim runs in 10 seconds</li>
    <li class="fragment">Larger IPC variance</li>
  </ul>
  <img class="fragment" src="./figs/multi-level-sim/huffbench_results.svg" />
</section>

<section>
  <h2>IPC Trace Prediction: wikisort</h2>
  <ul>
    <li class="fragment">Merge sort benchmark from Embench (wikisort)</li>
    <li class="fragment"><code>N=10000</code>, <code>C=18</code></li>
    <li class="fragment">Full RTL sim takes 15 minutes, TidalSim runs in 10 seconds</li>
    <li class="fragment">Can capture general trends and time-domain IPC variation</li>
  </ul>
  <img class="fragment" src="./figs/multi-level-sim/wikisort_results.svg" />
</section>

<section>
  <h2>Aggregate IPC Prediction for Embench Suite</h2>
  <div class="center">
    <img src="./figs/multi-level-sim/embench_ipc_error.svg" style="margin-bottom:0;" />
  </div>
  <p class="center fragment">Typical IPC error (<strong>without</strong> functional warmup and with fine time-domain precision of 10k instructions) <strong>is &lt; 5%</strong></p>
</section>

<!-- Add box and whiskers IPC error plot -->

<section>
  <h2>From Tidalsim v0.1 to v1</h2>

  <!-- Things to do before calling the first prototype complete: -->

  <ul>
    <li class="fragment">Functional L1-only cache warmup</li>
    <li class="fragment">Functional branch predictor warmup</li>
    <li class="fragment">Use robust checkpointing fork of spike
      <ul>
        <li>Better arch state initialization technique <span class="small">(via program snippet + selective forces depending on bits that can't be set via ISA)</span></li>
      </ul>
    </li>
    <li class="fragment">Characterization on other baremetal workloads
      <ul>
        <li>dhrystone, coremark, riscv-tests benchmarks, MiBench</li>
      </ul>
    </li>
    <li class="fragment">Explore more sophisticated clustering and extrapolation techniques</li>
    <li class="fragment"><strong>Demonstrate we can hit &lt;1% IPC error</strong></li>
  </ul>

  <p class="fragment center">These milestones will set the stage for the qual proposal</p>
</section>
