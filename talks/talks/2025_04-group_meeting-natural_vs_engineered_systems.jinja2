{% extends "base/base.jinja2" %}

{# HTML title #}
{% set webpage_title = "Natural vs Engineered Systems and Other Topics" %}
{# Short description #}
{% set description = "" %}
{# List of authors #}
{% set author = "Vighnesh Iyer" %}
{# Change ‘venue’ to a conference or workshop name if any #}
{% set venue = "Group Meeting" %}
{# Publication info (hidden by default) #}
{% set pub_datetime_iso = "2025-04-26" %}
{% set pub_date = "April 26, 2025" %}

{# Custom styles and JS for a particular talk #}
{% block custom_head %}
{% endblock %}

{% block theme %}
import '/themes/tokyonight-light.scss'
import 'highlight.js/styles/tokyo-night-dark.css'
{% endblock %}

{% set center = true %}

{% set rightarrow = "<strong>→</strong>" %}

{% block slides %}
<section class="center">
  <h2>Natural vs Engineered Systems</h2>
  <h2>When is ML Powerful?</h2>
  <h2>ML for Chip Design</h2>
  <p style="font-weight: normal; font-size: 0.8rem;">Vighnesh Iyer</p>

  <h4 style="font-weight: normal;">Group Meeting<br />
  Friday, May 2nd, 2025</h4>
</section>

<section>
  <section class="center">
    <h2>Natural vs Engineered Systems</h2>
    <p>My attempt at understanding the difference between <em>science</em> and <em>engineering</em> and how their worlds are bridged.</p>
    <p class="fragment"><strong>Why?</strong></p>
    <ol class="fragment">
      <li>Helps us understand what precisely is engineering research</li>
      <li>Gives us insights as to when ML is powerful and when its value is dubious</li>
    </ol>
  </section>

  <section>
    <h2 style="margin: 0">Natural Systems in General</h2>

    <div class="container" style="grid-template-columns: 1fr 1fr;">
      <div><img class="image" width="80%" src="./figs/natural_vs_engineered_systems/natural_systems.svg" /></div>
      <div>
        <ul>
          <li class="fragment">A natural system is defined by a set of axioms</li>
          <li class="fragment">The nature of natural axioms
            <ul>
              <li>If we can't know them, we can build approximate models for them</li>
              <li>If we assume them precisely, they will be incomplete</li>
            </ul>
          </li>
          <li class="fragment">A natural system produces "observations"
            <ul>
              <li>"Truth" and "facts" are inherent in a natural system</li>
            </ul>
          </li>
        </ul>
      </div>
    </div>
  </section>

  <section>
    <h2 style="margin: 0">Natural Systems - Examples</h2>

    <div class="container" style="grid-template-columns: 1fr 1fr;">
      <div><img class="image" width="80%" src="./figs/natural_vs_engineered_systems/natural_systems.svg" /></div>
      <div>
        <ul>
          <li class="fragment">There are only two examples of <em>primordial</em> natural systems</li>
          <!-- https://chatgpt.com/share/680ea232-9694-8004-8912-78384d019c18 -->
        </ul>
        <ol>
          <li class="fragment">Our physical world</li>
          <li class="fragment">Concepts in pure mathematics
            <ul class="small">
              <li>Number theory (e.g. Peano arithmetic)</li>
              <li>Computation (e.g. Lambda calculus)</li>
              <li>Formal logic (e.g. First-order logic)</li>
              <li>Proof theory (e.g. Martin-Löf type theory)</li>
              <li>Set theory (e.g. ZFC)</li>
            </ul>
          </li>
        </ol>
        <p class="fragment smallish center">The <em>pure</em> study of natural systems is <em>theoretical</em> math / logic / physics / metaphysics / philosophy</p>
      </div>
    </div>
  </section>

  <section>
    <h2>Understanding Natural Systems</h2>
    <!--
    can't you tell I'm trying to unify physical science and abstract math, even though they don't really seem to fit together?
    - Oh, this is just the scientific method? Yes, obviously.
    - Godel's incompleteness theorem
      - Can't know everything from first principles
    - Heisenburg's uncertainty principle
      - Only can get approximate models, not the truth itself
    - Failure to explain various natural phenomena (see unanswered questions in physics)
    -->
    <div class="container" style="grid-template-columns: 1fr 1fr;">
      <div><img class="image" width="100%" src="./figs/natural_vs_engineered_systems/understanding_natural_systems.svg" /></div>
      <div>
        <ul>
          <li class="fragment">Can we ever fully comprehend a natural system?
            <ul><li><strong>No</strong>: Gödel's incompleteness theorems</li></ul>
          </li>
          <li class="fragment">Can we perfectly simulate a natural system?
            <ul><li><strong>No</strong>: Uncertainty principle</li></ul>
          </li>
          <li class="fragment">Do we fully understand the physical natural system?
            <ul><li><strong>No</strong>: <a href="https://en.wikipedia.org/wiki/Cosmological_constant_problem#Cosmological_constant_problem">Cosmological constant problem</a></li></ul>
          </li>
        </ul>
      </div>
    </div>
  </section>

  <section>
    <h2 style="margin: 0">Engineered Systems</h2>
    <div class="container" style="grid-template-columns: 0.3fr 1fr;">
      <div><img class="image" width="100%" src="./figs/natural_vs_engineered_systems/engineered_systems.svg" /></div>
      <div>
        <ul>
          <li class="fragment">The design of physical primitives is the core of <em>applied science</em></li>
          <li class="fragment">The physical manifestation of an engineered system is the point where abstractions are broken</li>
          <li class="fragment">Engineered systems are perfectly simulatable with respect to their abstractions
            <ul>
              <li>Unlike natural systems, everything about an engineered system is known and complete</li>
            </ul>
          </li>
          <li class="fragment">Engineering research fits into these boxes
            <ul>
              <li>Study the implementation tradeoffs of a specification / task</li>
              <li>Create new abstractions / models</li>
              <li>Improve the design methodology and algorithms</li>
            </ul>
          </li>
        </ul>
      </div>
    </div>
  </section>

  <section>
    <h2 style="margin: 0;">The Missing Middle</h2>

    <!-- What is biology? -->
    <div class="container" style="grid-template-columns: 1fr 1fr 0.5fr; margin: 0;">
      <div><img class="image" width="100%" src="./figs/natural_vs_engineered_systems/natural_systems.svg" /></div>
      <div style="font-size: 2rem"><strong>???</strong></div>
      <div><img class="image" width="100%" src="./figs/natural_vs_engineered_systems/engineered_systems.svg" /></div>
    </div>

    <p class="fragment center smallish" style="margin: 0;"><strong>Consider</strong>: biological systems, linguistics, artificial neural networks, symbolic AI</p>
  </section>

  <section>
    <h2>Evolved Systems</h2>
    <div class="container" style="grid-template-columns: 0.8fr 1fr 1.3fr 0.5fr; margin: 0;">
      <div><img class="image" width="100%" src="./figs/natural_vs_engineered_systems/natural_systems.svg" /></div>
      <div class="fragment"><img class="image" style="margin: 0;" width="100%" src="./figs/natural_vs_engineered_systems/evolved_natural_systems.svg" />
        <p class="center small">e.g. molecules, DNA, cells, linguistics</p>
        </div>
      <div class="fragment"><img class="image" style="margin: 0;" width="100%" src="./figs/natural_vs_engineered_systems/evolved_engineered_systems.svg" />
        <p class="center small">e.g. ANNs, animal husbandry</p>
      </div>
      <div><img class="image" width="100%" src="./figs/natural_vs_engineered_systems/engineered_systems.svg" /></div>
    </div>
  </section>
</section>

<section>
  <section class="center">
    <h2>When is ML Powerful?</h2>
  </section>

<!--
- Ways to use ML: ML in the loop, out of the loop, and end-to-end (i.e. generative)
- The major caveat to the bitter lesson - feasibility matters. Fuzziness vs exactness matters. Engineered vs natural systems matter.
- Out of distribution issues (natural systems don't suffer from this) (evolved engineered systems trying to mimic engineered ones will fail this - fail to generalize, which isn't a problem for natural or purely engineered systems)
- The big examples:
  - The MNIST lesson
  - Compare Semantic segmentation using all 3 systems
  - Evolved antennas
  - FSD vs traditional approaches
  - The rendering example
    - will the input and output of the ML model be engineered systems (rendering engine, formal geometry, camera trajectory) or will it be a series of images and give me some voxel maps and camera position?
  - Language models vs classical linguistics / NLP
-->

  <section>
    <h2>When is ML Powerful?</h2>
    <div class="container" style="grid-template-columns: 0.8fr 1fr 1.3fr 0.5fr; margin: 0;">
      <div><img class="image" width="100%" src="./figs/natural_vs_engineered_systems/natural_systems.svg" /></div>
      <div><img class="image" style="margin: 0;" width="100%" src="./figs/natural_vs_engineered_systems/evolved_natural_systems.svg" />
        </div>
      <div><img class="image" style="margin: 0;" width="100%" src="./figs/natural_vs_engineered_systems/evolved_engineered_systems.svg" />
      </div>
      <div><img class="image" width="100%" src="./figs/natural_vs_engineered_systems/engineered_systems.svg" /></div>
    </div>
    <ol class="smallish">
      <li class="fragment">An evolved engineered system <em>mimicking</em> a natural system (i.e. generative)</li>
      <li class="fragment">An evolved engineered system <em>acting within</em> an engineered system (i.e. in/around-the-loop)</li>
    </ol>
  </section>

  <section>
    <h2>When is ML Powerful?</h2>

    <p class="center fragment">ML is powerful when it can wholesale break engineered abstractions to mimic naturally evolved systems</p>

    <p class="center fragment">ML is weak when it is forced into a box defined by prior engineering efforts (e.g. surrogate functions, fixed abstractions)</p>

    <p class="center fragment">ML is powerful when the problem is fuzzy and the solution can be too</p>

    <p class="center fragment">ML is weak when the problem is well defined and it is trying to replicate an engineered algorithm</p>
  </section>

  <section>
    <h2>Ways to Use ML</h2>

    <ul>
      <li class="fragment"><strong>In-the-loop</strong> with an engineered algorithm
        <ul>
          <li>ML for deciding moves wtihin simulated annealing</li>
          <li>ML for choosing branching variables within CDCL (SAT solvers)</li>
          <li>In general, ML for <em>heuristics</em> and <em>learned behaviors</em></li>
        </ul>
      </li>
      <li class="fragment"><strong>Around-the-loop</strong> with an engineered algorithm
        <ul>
          <li>ML for tuning hyperparameters of simulated annealing</li>
          <li>Synopsys DSO.ai - hyperparameter tuning around CAD algorithms</li>
          <li>In general, ML for <em>embedding</em> and <em>regression</em></li>
        </ul>
      </li>
      <li class="fragment"><strong>"Generative"</strong> / <strong>"End to End"</strong>
        <ul>
          <li>ML goes from input to output, bypassing human engineered abstractions</li>
          <!--Most ML for chip design "research" is actually generative, and is therefore not suitable. since we are talking about an engineered system-->
        </ul>
      </li>
    </ul>
  </section>

  <section>
    <h2>The "Bitter Lesson"</h2>

    <blockquote class="smallish">
<p>The biggest lesson that can be read from 70 years of AI research is that general methods that leverage computation are ultimately the most effective, and by a large margin.</p>

<p>We want AI agents that can discover like we can, not which contain what we have discovered. Building in our discoveries only makes it harder to see how the discovering process can be done.</p>

      <p style="text-align: start;">- Rich Sutton's <a href="https://www.cs.utexas.edu/~eunsol/courses/data/bitter_lesson.pdf">"The Bitter Lesson"</a></p>
    </blockquote>
  </section>

  <section>
    <h2>Caveats of the "Bitter Lesson"</h2>

    <ul>
      <li class="fragment"><strong>Hypothesis</strong>: More data + compute + search + general techniques = better <em>end to end</em> performance</li>
      <li class="fragment">The "Bitter Lesson" applies to mimicking natural systems
        <ul><li>Not to mimicking engineered systems</li></ul>
      </li>
      <li class="fragment">Deep ML works best for <em>fuzzy solution spaces</em> where errors are tolerable</li>
      <li class="fragment">Out-of-distribution <em>generalization</em> is still hard</li>
    </ul>

    <blockquote class="small fragment">
    <p style="margin: 0;">What do we do with the problems that are too hard to solve with the limited compute that we have? Lie down for 80 years and wait for compute to catch up? Or solve a smaller problem using specialized tricks?</p>

    <p>The bitter lesson is nothing of the sort, there is plenty of space for thinking hard, and there always will be.</p>

    <p style="margin: 0">- <a href="https://news.ycombinator.com/item?id=43451742">Anon</a></p>
    </blockquote>
  </section>

  <section>
    <h2>Example - MNIST / Semantic Segmentation</h2>

    <div><img class="image" width="100%" src="./figs/natural_vs_engineered_systems/mnist_example.svg" /></div>

    <p class="center fragment">Do you see the parallels with how ML is often "used" in EDA CAD?</p>
  </section>

  <section>
    <h2>Example - 3D Rendering</h2>

    <div class="container" style="grid-template-columns: 1fr 1fr;">
      <div><img class="image" width="100%" src="./figs/natural_vs_engineered_systems/3d_rendering.svg" /></div>
      <div>
        <ul>
          <li class="fragment">What's the point of replicating an engineered algorithm?
            <ul><li>The abstractions are unchanged! ML is weak!</li></ul>
          </li>
          <li class="fragment">Training on data produced by an algorithm that encapsulates the entire problem isn't useful</li>
          <li class="fragment">Instead, step back and train end-to-end models that learn novel representations of the input</li>
        </ul>
      </div>
    </div>

  </section>

  <section>
    <h2>More Examples</h2>

    <ul>
      <li class="fragment">Speech synthesis</li>
      <li class="fragment">Language models (+ linguistics)</li>
      <li class="fragment">Evolved antennas / RF circuits / silicon photonics / MEMS</li>
      <li class="fragment">The evolution of Tesla FSD
        <ul><li>From hand written state machines and control rules to a fully learned control blob</li></ul>
      </li>
    </ul>
  </section>
</section>

<!--
- https://www.nature.com/articles/s41586-024-08032-5
> AlphaChip was one of the first RL methods deployed to solve a real-world engineering problem, and its publication triggered an explosion of work on AI for chip design2,3,4,5,6,7,8,9,10,11,12,13,14,15,16. Nevertheless, as described in Sutton’s The Bitter Lesson17, there is often reluctance to accept the application of machine learning to new areas, and ultimately this has led to some confusion around our work, which we address below.


ML for Surrogate Functions for Engineered Algorithms - QoR prediction / one-shot synthesis
  - you can't do better than the engineered algorithm! all you can do is approximate it. what are you doing?
ML for RTL simulation
Why did AlphaChip fail? In principle, ML for placement would be way better wrt runtime and QoR vs algorithmic / manual heuristic techniques
The problem of AlphaChip was that it wasn't actually AlphaChip. It was Alpha-"MacroPlacement". It wasn't ambitious enough! Try to one-shot everything (down to the geometry fed into the photomask manufacturing machine)!
End to end ML - The Altman Plan
LLMs for RTL engineering
The AI scientist - high potential for drug discovery (mechanical search), low potential for true discovery (not so mechanical)
-->

<section>
  <section class="center">
    <h2>ML for Chip Design</h2>
    <p>Applying the lessons from other domains</p>
  </section>

  <section>
    <h2>ML Surrogate Models for Engineered Algorithms</h2>

    <ul>
      <li class="fragment">Examples
        <ul>
          <li>What is the PPA of some bit of RTL?</li>
          <li>
        </ul>
      </li>
      <li class="fragment">This is the most common type of ML for EDA CAD in academia
        <ul>
          <li class="fragment">The data comes from an existing CAD algorithm</li>
          <li class="fragment">No new abstractions are learned</li>
          <li class="fragment">The out-of-distribution generalization is poor</li>
        </ul>
      </li>
      <li class="fragment">Why do people do this?
        <ul>
          <li class="fragment">The CAD algorithm is too slow!</li>
          <li class="fragment">But how does this solve anything (algorithm-time moves to training-time)?
          <li class="fragment">Is there a better way? (e.g. ML in the loop)</li>
        </ul>
      </li>
    </ul>
  </section>
</section>
{% endblock %}
