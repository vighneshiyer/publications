<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>{{ webpage_title }}</title>
    <meta name="description" content="{{ description }}">
    <meta name="author" content="{{ author }}">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    {% block custom_head %}
    {% endblock %}
  </head>

  <body vocab="http://schema.org/" typeof="PresentationDigitalDocument">
    <span property="publisher" style="display: none;">{{ venue }}</span>
    <time pubdate property="datePublished" datetime="{{ pub_datetime_iso }}" style="display: none;">{{ pub_date }}</time>
    <div class="reveal">
        <div class="slides">
            {% block slides %}
            {% endblock %}
        </div>
    </div>

    <script type="module">
    import 'reveal.js/dist/reset.css'
    import 'reveal.js/dist/reveal.css'
    {% block theme %}
    {% endblock %}
    import Markdown from 'reveal.js/plugin/markdown/markdown.esm.js';
    import Notes from 'reveal.js/plugin/notes/notes.esm.js';
    import Highlight from 'reveal.js/plugin/highlight/highlight.esm.js';
    import Zoom from 'reveal.js/plugin/zoom/zoom.esm.js';
    import Reveal from 'reveal.js';
    {% block reveal_init %}
    Reveal.initialize({
      controls: true,
      progress: true,
      {# By default, slides are centered #}
      {# You can override this per-presentation by setting 'center' #}
      {% if center is not defined %}
      center: true,
      {% else %}
      center: {{ center | string | lower }},
      {% endif %}
      hash: true,
      plugins: [ Markdown, Notes, Highlight, Zoom ]
    });
    Reveal.configure({ pdfSeparateFragments: false });
    {% endblock %}
    (function (doc, win) {
      "use strict"

      const pointer_width = 25
      const pointer_width_2 = pointer_width / 2
      const initial_css = {
        position: 'absolute',
        float: 'left',
        borderRadius: '50%',
        width: pointer_width + 'px',
        height: pointer_width + 'px',
        backgroundColor: 'rgba(255, 0, 0, 0.5)',
        zIndex: 20,
        display: 'none'
      }
      let laserActive = false
      const body = doc.getElementsByTagName('body')[0]
      let tail = doc.createElement('div')

      function toggleLaser () {
        if (!laserActive) {
          document.removeEventListener('mousemove', update_laser_position)
          tail.style.display = 'none'
          body.style.cursor = 'auto'
        } else {
          tail.style.width = pointer_width + 'px'
          tail.style.height = pointer_width + 'px'
          body.style.cursor = 'none'
          document.addEventListener('mousemove', update_laser_position)
        }
      }

      function initModule () {
        Object.assign(tail.style, initial_css)
        body.appendChild(tail)
        Reveal.addKeyBinding( { keyCode: 84, key: 'T', description: 'toggle laser' }, () => {
          laserActive = !laserActive
          toggleLaser()
        } )
      }

      function update_laser_position(e) {
        tail.style.display = 'block'
        tail.style.left = e.pageX - pointer_width_2 + 'px'
        tail.style.top = e.pageY - pointer_width_2 + 'px'
      }

      initModule()
    })(document, window)
    </script>
  </body>
</html>
